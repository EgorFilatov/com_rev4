
com_rev4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f20  08003f20  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003f20  08003f20  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f20  08003f20  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000014  08003f3c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08003f3c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc65  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bee  00000000  00000000  0002dca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115a6  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e533  00000000  00000000  000425fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006686e  00000000  00000000  00050b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b739f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c2c  00000000  00000000  000b73f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ed0 	.word	0x08003ed0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003ed0 	.word	0x08003ed0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uartInterrupt(rxArrNum);
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <HAL_UART_RxCpltCallback+0x1c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	0018      	movs	r0, r3
 800022e:	f000 f849 	bl	80002c4 <uartInterrupt>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b002      	add	sp, #8
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	20000319 	.word	0x20000319

08000240 <HAL_UART_ErrorCallback>:
	++RxMs;
	++TxMs;
}


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(&huart2);
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <HAL_UART_ErrorCallback+0x7c>)
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fa58 	bl	8002700 <HAL_UART_AbortReceive_IT>
	uint32_t dr = USART2->RDR;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <HAL_UART_ErrorCallback+0x80>)
 8000252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000254:	b29b      	uxth	r3, r3
 8000256:	60fb      	str	r3, [r7, #12]
	uint32_t er = HAL_UART_GetError(&huart2);
 8000258:	4b18      	ldr	r3, [pc, #96]	; (80002bc <HAL_UART_ErrorCallback+0x7c>)
 800025a:	0018      	movs	r0, r3
 800025c:	f002 fe03 	bl	8002e66 <HAL_UART_GetError>
 8000260:	0003      	movs	r3, r0
 8000262:	60bb      	str	r3, [r7, #8]
	if (er & HAL_UART_ERROR_PE) {
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2201      	movs	r2, #1
 8000268:	4013      	ands	r3, r2
 800026a:	d003      	beq.n	8000274 <HAL_UART_ErrorCallback+0x34>
		__HAL_UART_CLEAR_PEFLAG(&huart2);
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <HAL_UART_ErrorCallback+0x7c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2201      	movs	r2, #1
 8000272:	621a      	str	r2, [r3, #32]
	}
	if (er & HAL_UART_ERROR_NE) {
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	2202      	movs	r2, #2
 8000278:	4013      	ands	r3, r2
 800027a:	d003      	beq.n	8000284 <HAL_UART_ErrorCallback+0x44>
		__HAL_UART_CLEAR_NEFLAG(&huart2);
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <HAL_UART_ErrorCallback+0x7c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2204      	movs	r2, #4
 8000282:	621a      	str	r2, [r3, #32]
	}
	if (er & HAL_UART_ERROR_FE) {
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	2204      	movs	r2, #4
 8000288:	4013      	ands	r3, r2
 800028a:	d003      	beq.n	8000294 <HAL_UART_ErrorCallback+0x54>
		__HAL_UART_CLEAR_FEFLAG(&huart2);
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <HAL_UART_ErrorCallback+0x7c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2202      	movs	r2, #2
 8000292:	621a      	str	r2, [r3, #32]
	}
	if (er & HAL_UART_ERROR_ORE) {
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2208      	movs	r2, #8
 8000298:	4013      	ands	r3, r2
 800029a:	d003      	beq.n	80002a4 <HAL_UART_ErrorCallback+0x64>
		__HAL_UART_CLEAR_OREFLAG(huart);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2208      	movs	r2, #8
 80002a2:	621a      	str	r2, [r3, #32]
	}
	if (er & HAL_UART_ERROR_DMA) {
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2210      	movs	r2, #16
 80002a8:	4013      	ands	r3, r2
 80002aa:	d003      	beq.n	80002b4 <HAL_UART_ErrorCallback+0x74>
		__HAL_UART_CLEAR_NEFLAG(&huart2);
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <HAL_UART_ErrorCallback+0x7c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2204      	movs	r2, #4
 80002b2:	621a      	str	r2, [r3, #32]
	}
	//huart->ErrorCode = HAL_UART_ERROR_NONE;
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b004      	add	sp, #16
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000164 	.word	0x20000164
 80002c0:	40004400 	.word	0x40004400

080002c4 <uartInterrupt>:

void uartInterrupt(uint8_t num) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	0002      	movs	r2, r0
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	701a      	strb	r2, [r3, #0]
		uartRxState[num] = 2;
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <uartInterrupt+0x50>)
 80002d6:	2102      	movs	r1, #2
 80002d8:	54d1      	strb	r1, [r2, r3]
		if (num) {
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d00a      	beq.n	80002f8 <uartInterrupt+0x34>
			uartRxState[0] = 1;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <uartInterrupt+0x50>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, uartRx[0], 53);
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <uartInterrupt+0x54>)
 80002ea:	6819      	ldr	r1, [r3, #0]
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <uartInterrupt+0x58>)
 80002ee:	2235      	movs	r2, #53	; 0x35
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 f957 	bl	80025a4 <HAL_UART_Receive_IT>
		} else {
			uartRxState[1] = 1;
			HAL_UART_Receive_IT(&huart2, uartRx[1], 53);
		}
}
 80002f6:	e009      	b.n	800030c <uartInterrupt+0x48>
			uartRxState[1] = 1;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <uartInterrupt+0x50>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(&huart2, uartRx[1], 53);
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <uartInterrupt+0x54>)
 8000300:	6859      	ldr	r1, [r3, #4]
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <uartInterrupt+0x58>)
 8000304:	2235      	movs	r2, #53	; 0x35
 8000306:	0018      	movs	r0, r3
 8000308:	f002 f94c 	bl	80025a4 <HAL_UART_Receive_IT>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000031c 	.word	0x2000031c
 8000318:	20000000 	.word	0x20000000
 800031c:	20000164 	.word	0x20000164

08000320 <uartProcessing>:


void uartProcessing(uint8_t num) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	0002      	movs	r2, r0
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	701a      	strb	r2, [r3, #0]
	switch (uartRxState[num]) {
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4a6a      	ldr	r2, [pc, #424]	; (80004dc <uartProcessing+0x1bc>)
 8000332:	5cd3      	ldrb	r3, [r2, r3]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <uartProcessing+0x1e>
 8000338:	2b02      	cmp	r3, #2
 800033a:	d03a      	beq.n	80003b2 <uartProcessing+0x92>
		}
		uartRxState[num] = 0;
		num ? rxArrNum = 0 : rxArrNum = 1;
		break;
	}
}
 800033c:	e0c9      	b.n	80004d2 <uartProcessing+0x1b2>
		if (huart2.RxXferCount < 0x0035 && huart2.RxXferCount > 0) {
 800033e:	4b68      	ldr	r3, [pc, #416]	; (80004e0 <uartProcessing+0x1c0>)
 8000340:	225a      	movs	r2, #90	; 0x5a
 8000342:	5a9b      	ldrh	r3, [r3, r2]
 8000344:	b29b      	uxth	r3, r3
 8000346:	2b34      	cmp	r3, #52	; 0x34
 8000348:	d807      	bhi.n	800035a <uartProcessing+0x3a>
 800034a:	4b65      	ldr	r3, [pc, #404]	; (80004e0 <uartProcessing+0x1c0>)
 800034c:	225a      	movs	r2, #90	; 0x5a
 800034e:	5a9b      	ldrh	r3, [r3, r2]
 8000350:	b29b      	uxth	r3, r3
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <uartProcessing+0x3a>
 8000356:	2301      	movs	r3, #1
 8000358:	e000      	b.n	800035c <uartProcessing+0x3c>
 800035a:	2300      	movs	r3, #0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d100      	bne.n	8000362 <uartProcessing+0x42>
 8000360:	e0b6      	b.n	80004d0 <uartProcessing+0x1b0>
			switch (rxStarted) {
 8000362:	4b60      	ldr	r3, [pc, #384]	; (80004e4 <uartProcessing+0x1c4>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d107      	bne.n	800037a <uartProcessing+0x5a>
				rxStarted = 1;
 800036a:	4b5e      	ldr	r3, [pc, #376]	; (80004e4 <uartProcessing+0x1c4>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
				RxMs = 0;
 8000370:	4b5d      	ldr	r3, [pc, #372]	; (80004e8 <uartProcessing+0x1c8>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
				break;
 8000376:	46c0      	nop			; (mov r8, r8)
		break;
 8000378:	e0aa      	b.n	80004d0 <uartProcessing+0x1b0>
				if (RxMs > UART_RX_PERIOD_MS / 5) {
 800037a:	4b5b      	ldr	r3, [pc, #364]	; (80004e8 <uartProcessing+0x1c8>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d800      	bhi.n	8000384 <uartProcessing+0x64>
 8000382:	e0a5      	b.n	80004d0 <uartProcessing+0x1b0>
					rxStarted = 0;
 8000384:	4b57      	ldr	r3, [pc, #348]	; (80004e4 <uartProcessing+0x1c4>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
					HAL_UART_AbortReceive_IT(&huart2);
 800038a:	4b55      	ldr	r3, [pc, #340]	; (80004e0 <uartProcessing+0x1c0>)
 800038c:	0018      	movs	r0, r3
 800038e:	f002 f9b7 	bl	8002700 <HAL_UART_AbortReceive_IT>
					uartRxState[num] = 1;
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4a51      	ldr	r2, [pc, #324]	; (80004dc <uartProcessing+0x1bc>)
 8000398:	2101      	movs	r1, #1
 800039a:	54d1      	strb	r1, [r2, r3]
					HAL_UART_Receive_DMA(&huart2, uartRx[num], 53);
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	781a      	ldrb	r2, [r3, #0]
 80003a0:	4b52      	ldr	r3, [pc, #328]	; (80004ec <uartProcessing+0x1cc>)
 80003a2:	0092      	lsls	r2, r2, #2
 80003a4:	58d1      	ldr	r1, [r2, r3]
 80003a6:	4b4e      	ldr	r3, [pc, #312]	; (80004e0 <uartProcessing+0x1c0>)
 80003a8:	2235      	movs	r2, #53	; 0x35
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 f951 	bl	8002652 <HAL_UART_Receive_DMA>
		break;
 80003b0:	e08e      	b.n	80004d0 <uartProcessing+0x1b0>
		rxStarted = 0;
 80003b2:	4b4c      	ldr	r3, [pc, #304]	; (80004e4 <uartProcessing+0x1c4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
		if (uartRx[num][0] == 0x55 && uartRx[num][1] == 0xAA && uartRx[num][2] == 48) {
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	4b4b      	ldr	r3, [pc, #300]	; (80004ec <uartProcessing+0x1cc>)
 80003be:	0092      	lsls	r2, r2, #2
 80003c0:	58d3      	ldr	r3, [r2, r3]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b55      	cmp	r3, #85	; 0x55
 80003c6:	d000      	beq.n	80003ca <uartProcessing+0xaa>
 80003c8:	e071      	b.n	80004ae <uartProcessing+0x18e>
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781a      	ldrb	r2, [r3, #0]
 80003ce:	4b47      	ldr	r3, [pc, #284]	; (80004ec <uartProcessing+0x1cc>)
 80003d0:	0092      	lsls	r2, r2, #2
 80003d2:	58d3      	ldr	r3, [r2, r3]
 80003d4:	3301      	adds	r3, #1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2baa      	cmp	r3, #170	; 0xaa
 80003da:	d168      	bne.n	80004ae <uartProcessing+0x18e>
 80003dc:	1dfb      	adds	r3, r7, #7
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b42      	ldr	r3, [pc, #264]	; (80004ec <uartProcessing+0x1cc>)
 80003e2:	0092      	lsls	r2, r2, #2
 80003e4:	58d3      	ldr	r3, [r2, r3]
 80003e6:	3302      	adds	r3, #2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b30      	cmp	r3, #48	; 0x30
 80003ec:	d15f      	bne.n	80004ae <uartProcessing+0x18e>
			uartRxSumm = 0;
 80003ee:	4b40      	ldr	r3, [pc, #256]	; (80004f0 <uartProcessing+0x1d0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i <= 50; i++) {
 80003f4:	230f      	movs	r3, #15
 80003f6:	18fb      	adds	r3, r7, r3
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	210f      	movs	r1, #15
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b32      	cmp	r3, #50	; 0x32
 8000404:	d815      	bhi.n	8000432 <uartProcessing+0x112>
				uartRxSumm += uartRx[num][i];
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <uartProcessing+0x1cc>)
 800040c:	0092      	lsls	r2, r2, #2
 800040e:	58d2      	ldr	r2, [r2, r3]
 8000410:	187b      	adds	r3, r7, r1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	18d3      	adds	r3, r2, r3
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b29a      	uxth	r2, r3
 800041a:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <uartProcessing+0x1d0>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	18d3      	adds	r3, r2, r3
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <uartProcessing+0x1d0>)
 8000424:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i <= 50; i++) {
 8000426:	187b      	adds	r3, r7, r1
 8000428:	781a      	ldrb	r2, [r3, #0]
 800042a:	187b      	adds	r3, r7, r1
 800042c:	3201      	adds	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
 8000430:	e7e4      	b.n	80003fc <uartProcessing+0xdc>
			if ((uint8_t) uartRxSumm == uartRx[num][51] && (uint8_t) (uartRxSumm >> 8) == uartRx[num][52] && uartRxFinished == 0) {
 8000432:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <uartProcessing+0x1d0>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	7819      	ldrb	r1, [r3, #0]
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <uartProcessing+0x1cc>)
 800043e:	0089      	lsls	r1, r1, #2
 8000440:	58cb      	ldr	r3, [r1, r3]
 8000442:	3333      	adds	r3, #51	; 0x33
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	429a      	cmp	r2, r3
 8000448:	d131      	bne.n	80004ae <uartProcessing+0x18e>
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <uartProcessing+0x1d0>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2da      	uxtb	r2, r3
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	7819      	ldrb	r1, [r3, #0]
 8000458:	4b24      	ldr	r3, [pc, #144]	; (80004ec <uartProcessing+0x1cc>)
 800045a:	0089      	lsls	r1, r1, #2
 800045c:	58cb      	ldr	r3, [r1, r3]
 800045e:	3334      	adds	r3, #52	; 0x34
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d123      	bne.n	80004ae <uartProcessing+0x18e>
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <uartProcessing+0x1d4>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d11f      	bne.n	80004ae <uartProcessing+0x18e>
				uartRxFinished = 1;
 800046e:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <uartProcessing+0x1d4>)
 8000470:	2201      	movs	r2, #1
 8000472:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i <= 52; i++) {
 8000474:	230e      	movs	r3, #14
 8000476:	18fb      	adds	r3, r7, r3
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	210e      	movs	r1, #14
 800047e:	187b      	adds	r3, r7, r1
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b34      	cmp	r3, #52	; 0x34
 8000484:	d813      	bhi.n	80004ae <uartProcessing+0x18e>
					uartRxSaved[i] = uartRx[num][i];
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <uartProcessing+0x1cc>)
 800048c:	0092      	lsls	r2, r2, #2
 800048e:	58d2      	ldr	r2, [r2, r3]
 8000490:	187b      	adds	r3, r7, r1
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	18d2      	adds	r2, r2, r3
 8000496:	0008      	movs	r0, r1
 8000498:	187b      	adds	r3, r7, r1
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	7811      	ldrb	r1, [r2, #0]
 800049e:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <uartProcessing+0x1d8>)
 80004a0:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i <= 52; i++) {
 80004a2:	183b      	adds	r3, r7, r0
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	3201      	adds	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	e7e6      	b.n	800047c <uartProcessing+0x15c>
		uartRxState[num] = 0;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <uartProcessing+0x1bc>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	54d1      	strb	r1, [r2, r3]
		num ? rxArrNum = 0 : rxArrNum = 1;
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d003      	beq.n	80004c8 <uartProcessing+0x1a8>
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <uartProcessing+0x1dc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
		break;
 80004c6:	e004      	b.n	80004d2 <uartProcessing+0x1b2>
		num ? rxArrNum = 0 : rxArrNum = 1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <uartProcessing+0x1dc>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
		break;
 80004ce:	e000      	b.n	80004d2 <uartProcessing+0x1b2>
		break;
 80004d0:	46c0      	nop			; (mov r8, r8)
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b004      	add	sp, #16
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	2000031c 	.word	0x2000031c
 80004e0:	20000164 	.word	0x20000164
 80004e4:	2000031a 	.word	0x2000031a
 80004e8:	20000322 	.word	0x20000322
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000320 	.word	0x20000320
 80004f4:	2000031e 	.word	0x2000031e
 80004f8:	200002e4 	.word	0x200002e4
 80004fc:	20000319 	.word	0x20000319

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fbd0 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f826 	bl	8000558 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f938 	bl	8000780 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000510:	f000 f910 	bl	8000734 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000514:	f000 f8da 	bl	80006cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000518:	f000 f870 	bl	80005fc <_ZL12MX_SPI1_Initv>
  MX_TIM6_Init();
 800051c:	f000 f8b0 	bl	8000680 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); //Vklychenie taimera 6
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <main+0x48>)
 8000522:	0018      	movs	r0, r3
 8000524:	f001 ff28 	bl	8002378 <HAL_TIM_Base_Start_IT>
  uartRxState[0] = 1;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <main+0x4c>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uartRx0, 53); // Priem po UART
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <main+0x50>)
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x54>)
 8000532:	2235      	movs	r2, #53	; 0x35
 8000534:	0018      	movs	r0, r3
 8000536:	f002 f835 	bl	80025a4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uartProcessing(0);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff fef0 	bl	8000320 <uartProcessing>
	  uartProcessing(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff feed 	bl	8000320 <uartProcessing>
	  uartProcessing(0);
 8000546:	e7f8      	b.n	800053a <main+0x3a>
 8000548:	2000011c 	.word	0x2000011c
 800054c:	2000031c 	.word	0x2000031c
 8000550:	20000274 	.word	0x20000274
 8000554:	20000164 	.word	0x20000164

08000558 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b091      	sub	sp, #68	; 0x44
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	2410      	movs	r4, #16
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	2330      	movs	r3, #48	; 0x30
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 fca9 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2310      	movs	r3, #16
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 fca2 	bl	8003ec0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	0021      	movs	r1, r4
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2210      	movs	r2, #16
 800058e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	22a0      	movs	r2, #160	; 0xa0
 80005a0:	0392      	lsls	r2, r2, #14
 80005a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 f861 	bl	8001674 <HAL_RCC_OscConfig>
 80005b2:	0003      	movs	r3, r0
 80005b4:	1e5a      	subs	r2, r3, #1
 80005b6:	4193      	sbcs	r3, r2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <_Z18SystemClock_Configv+0x6a>
  {
    Error_Handler();
 80005be:	f000 f953 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	003b      	movs	r3, r7
 80005c4:	2207      	movs	r2, #7
 80005c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2202      	movs	r2, #2
 80005cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	003b      	movs	r3, r7
 80005dc:	2101      	movs	r1, #1
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fb62 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80005e4:	0003      	movs	r3, r0
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	4193      	sbcs	r3, r2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 80005f0:	f000 f93a 	bl	8000868 <Error_Handler>
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b011      	add	sp, #68	; 0x44
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <_ZL12MX_SPI1_Initv+0x80>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000608:	2282      	movs	r2, #130	; 0x82
 800060a:	0052      	lsls	r2, r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000616:	22e0      	movs	r2, #224	; 0xe0
 8000618:	00d2      	lsls	r2, r2, #3
 800061a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000632:	2208      	movs	r2, #8
 8000634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 8000656:	2208      	movs	r2, #8
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_ZL12MX_SPI1_Initv+0x7c>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fc67 	bl	8001f30 <HAL_SPI_Init>
 8000662:	0003      	movs	r3, r0
 8000664:	1e5a      	subs	r2, r3, #1
 8000666:	4193      	sbcs	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 800066e:	f000 f8fb 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000030 	.word	0x20000030
 800067c:	40013000 	.word	0x40013000

08000680 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <_ZL12MX_TIM6_Initv+0x40>)
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <_ZL12MX_TIM6_Initv+0x44>)
 8000688:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23999;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <_ZL12MX_TIM6_Initv+0x40>)
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <_ZL12MX_TIM6_Initv+0x48>)
 800068e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <_ZL12MX_TIM6_Initv+0x40>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <_ZL12MX_TIM6_Initv+0x40>)
 8000698:	2209      	movs	r2, #9
 800069a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_ZL12MX_TIM6_Initv+0x40>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_ZL12MX_TIM6_Initv+0x40>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fe17 	bl	80022d8 <HAL_TIM_Base_Init>
 80006aa:	0003      	movs	r3, r0
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	4193      	sbcs	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <_ZL12MX_TIM6_Initv+0x3a>
  {
    Error_Handler();
 80006b6:	f000 f8d7 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000011c 	.word	0x2000011c
 80006c4:	40001000 	.word	0x40001000
 80006c8:	00005dbf 	.word	0x00005dbf

080006cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <_ZL19MX_USART2_UART_Initv+0x64>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006d8:	22e1      	movs	r2, #225	; 0xe1
 80006da:	0252      	lsls	r2, r2, #9
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fef3 	bl	80024fc <HAL_UART_Init>
 8000716:	0003      	movs	r3, r0
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	4193      	sbcs	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000722:	f000 f8a1 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000164 	.word	0x20000164
 8000730:	40004400 	.word	0x40004400

08000734 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <_ZL11MX_DMA_Initv+0x48>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <_ZL11MX_DMA_Initv+0x48>)
 8000740:	2101      	movs	r1, #1
 8000742:	430a      	orrs	r2, r1
 8000744:	615a      	str	r2, [r3, #20]
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <_ZL11MX_DMA_Initv+0x48>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200a      	movs	r0, #10
 8000758:	f000 fbb6 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fbc8 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	200b      	movs	r0, #11
 8000768:	f000 fbae 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800076c:	200b      	movs	r0, #11
 800076e:	f000 fbc0 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40021000 	.word	0x40021000

08000780 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	240c      	movs	r4, #12
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2314      	movs	r3, #20
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f003 fb95 	bl	8003ec0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0309      	lsls	r1, r1, #12
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	031b      	lsls	r3, r3, #12
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	02c9      	lsls	r1, r1, #11
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <_ZL12MX_GPIO_Initv+0xd8>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	02db      	lsls	r3, r3, #11
 80007e4:	4013      	ands	r3, r2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80007ea:	23f8      	movs	r3, #248	; 0xf8
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <_ZL12MX_GPIO_Initv+0xdc>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	0019      	movs	r1, r3
 80007f4:	f000 ff20 	bl	8001638 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007f8:	4919      	ldr	r1, [pc, #100]	; (8000860 <_ZL12MX_GPIO_Initv+0xe0>)
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <_ZL12MX_GPIO_Initv+0xe4>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 ff1a 	bl	8001638 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000804:	193b      	adds	r3, r7, r4
 8000806:	22f8      	movs	r2, #248	; 0xf8
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2203      	movs	r2, #3
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	193b      	adds	r3, r7, r4
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <_ZL12MX_GPIO_Initv+0xdc>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f000 fd97 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <_ZL12MX_GPIO_Initv+0xe0>)
 8000830:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2203      	movs	r2, #3
 8000842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	187b      	adds	r3, r7, r1
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <_ZL12MX_GPIO_Initv+0xe4>)
 8000848:	0019      	movs	r1, r3
 800084a:	0010      	movs	r0, r2
 800084c:	f000 fd84 	bl	8001358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b009      	add	sp, #36	; 0x24
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000800 	.word	0x48000800
 8000860:	0000f007 	.word	0x0000f007
 8000864:	48000400 	.word	0x48000400

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	699a      	ldr	r2, [r3, #24]
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	619a      	str	r2, [r3, #24]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	69da      	ldr	r2, [r3, #28]
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0549      	lsls	r1, r1, #21
 800089c:	430a      	orrs	r2, r1
 800089e:	61da      	str	r2, [r3, #28]
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_MspInit+0x44>)
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	055b      	lsls	r3, r3, #21
 80008a8:	4013      	ands	r3, r2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b08b      	sub	sp, #44	; 0x2c
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	2414      	movs	r4, #20
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 faf6 	bl	8003ec0 <memset>
  if(hspi->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a47      	ldr	r2, [pc, #284]	; (80009f8 <HAL_SPI_MspInit+0x13c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d000      	beq.n	80008e0 <HAL_SPI_MspInit+0x24>
 80008de:	e086      	b.n	80009ee <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e0:	4b46      	ldr	r3, [pc, #280]	; (80009fc <HAL_SPI_MspInit+0x140>)
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <HAL_SPI_MspInit+0x140>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0149      	lsls	r1, r1, #5
 80008ea:	430a      	orrs	r2, r1
 80008ec:	619a      	str	r2, [r3, #24]
 80008ee:	4b43      	ldr	r3, [pc, #268]	; (80009fc <HAL_SPI_MspInit+0x140>)
 80008f0:	699a      	ldr	r2, [r3, #24]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	015b      	lsls	r3, r3, #5
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <HAL_SPI_MspInit+0x140>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <HAL_SPI_MspInit+0x140>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	0289      	lsls	r1, r1, #10
 8000906:	430a      	orrs	r2, r1
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <HAL_SPI_MspInit+0x140>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	029b      	lsls	r3, r3, #10
 8000912:	4013      	ands	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000918:	0021      	movs	r1, r4
 800091a:	187b      	adds	r3, r7, r1
 800091c:	22e0      	movs	r2, #224	; 0xe0
 800091e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2202      	movs	r2, #2
 8000924:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2203      	movs	r2, #3
 8000930:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	187a      	adds	r2, r7, r1
 800093a:	2390      	movs	r3, #144	; 0x90
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fd09 	bl	8001358 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 8000948:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <HAL_SPI_MspInit+0x148>)
 800094a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fad7 	bl	8000f2c <HAL_DMA_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000982:	f7ff ff71 	bl	8000868 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 800098a:	659a      	str	r2, [r3, #88]	; 0x58
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_SPI_MspInit+0x144>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <HAL_SPI_MspInit+0x150>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 800099a:	2210      	movs	r2, #16
 800099c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fab1 	bl	8000f2c <HAL_DMA_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 80009ce:	f7ff ff4b 	bl	8000868 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_SPI_MspInit+0x14c>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2019      	movs	r0, #25
 80009e4:	f000 fa70 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009e8:	2019      	movs	r0, #25
 80009ea:	f000 fa82 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b00b      	add	sp, #44	; 0x2c
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40013000 	.word	0x40013000
 80009fc:	40021000 	.word	0x40021000
 8000a00:	20000094 	.word	0x20000094
 8000a04:	4002001c 	.word	0x4002001c
 8000a08:	200000d8 	.word	0x200000d8
 8000a0c:	40020030 	.word	0x40020030

08000a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <HAL_TIM_Base_MspInit+0x34>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10b      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_TIM_Base_MspInit+0x38>)
 8000a24:	69da      	ldr	r2, [r3, #28]
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_TIM_Base_MspInit+0x38>)
 8000a28:	2110      	movs	r1, #16
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	61da      	str	r2, [r3, #28]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_TIM_Base_MspInit+0x38>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	2210      	movs	r2, #16
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40001000 	.word	0x40001000
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b08b      	sub	sp, #44	; 0x2c
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	2414      	movs	r4, #20
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f003 fa2e 	bl	8003ec0 <memset>
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <HAL_UART_MspInit+0x13c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d000      	beq.n	8000a70 <HAL_UART_MspInit+0x24>
 8000a6e:	e086      	b.n	8000b7e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <HAL_UART_MspInit+0x140>)
 8000a72:	69da      	ldr	r2, [r3, #28]
 8000a74:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <HAL_UART_MspInit+0x140>)
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0289      	lsls	r1, r1, #10
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	61da      	str	r2, [r3, #28]
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <HAL_UART_MspInit+0x140>)
 8000a80:	69da      	ldr	r2, [r3, #28]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	029b      	lsls	r3, r3, #10
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <HAL_UART_MspInit+0x140>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <HAL_UART_MspInit+0x140>)
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0289      	lsls	r1, r1, #10
 8000a96:	430a      	orrs	r2, r1
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <HAL_UART_MspInit+0x140>)
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	029b      	lsls	r3, r3, #10
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	220c      	movs	r2, #12
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	2390      	movs	r3, #144	; 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fc41 	bl	8001358 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <HAL_UART_MspInit+0x148>)
 8000ada:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000afa:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fa0f 	bl	8000f2c <HAL_DMA_Init>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b12:	f7ff fea9 	bl	8000868 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000b1a:	675a      	str	r2, [r3, #116]	; 0x74
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_UART_MspInit+0x144>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_UART_MspInit+0x150>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 f9e9 	bl	8000f2c <HAL_DMA_Init>
 8000b5a:	1e03      	subs	r3, r0, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000b5e:	f7ff fe83 	bl	8000868 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b66:	671a      	str	r2, [r3, #112]	; 0x70
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_UART_MspInit+0x14c>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	201c      	movs	r0, #28
 8000b74:	f000 f9a8 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b78:	201c      	movs	r0, #28
 8000b7a:	f000 f9ba 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b00b      	add	sp, #44	; 0x2c
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	200001ec 	.word	0x200001ec
 8000b94:	40020058 	.word	0x40020058
 8000b98:	20000230 	.word	0x20000230
 8000b9c:	40020044 	.word	0x40020044

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8b8 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fad3 	bl	8001182 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 facf 	bl	8001182 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000094 	.word	0x20000094
 8000bf0:	200000d8 	.word	0x200000d8

08000bf4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fac1 	bl	8001182 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <DMA1_Channel4_5_IRQHandler+0x20>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fabd 	bl	8001182 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000230 	.word	0x20000230
 8000c14:	200001ec 	.word	0x200001ec

08000c18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <SPI1_IRQHandler+0x14>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 fa3e 	bl	80020a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20000030 	.word	0x20000030

08000c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <USART2_IRQHandler+0x14>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 fe2a 	bl	8002890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000164 	.word	0x20000164

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f7ff fff6 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	; (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	; (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c82:	f003 f8f9 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff fc3b 	bl	8000500 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c98:	08003f28 	.word	0x08003f28
  ldr r2, =_sbss
 8000c9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ca0:	20000328 	.word	0x20000328

08000ca4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_Init+0x24>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_Init+0x24>)
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f809 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbe:	f7ff fdd9 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_InitTick+0x5c>)
 8000cda:	681c      	ldr	r4, [r3, #0]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_InitTick+0x60>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	23fa      	movs	r3, #250	; 0xfa
 8000ce4:	0098      	lsls	r0, r3, #2
 8000ce6:	f7ff fa0f 	bl	8000108 <__udivsi3>
 8000cea:	0003      	movs	r3, r0
 8000cec:	0019      	movs	r1, r3
 8000cee:	0020      	movs	r0, r4
 8000cf0:	f7ff fa0a 	bl	8000108 <__udivsi3>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 f90b 	bl	8000f12 <HAL_SYSTICK_Config>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e00f      	b.n	8000d24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d80b      	bhi.n	8000d22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	425b      	negs	r3, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 f8d8 	bl	8000ec8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_InitTick+0x64>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b003      	add	sp, #12
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000010 	.word	0x20000010
 8000d34:	2000000c 	.word	0x2000000c

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	001a      	movs	r2, r3
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x20>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	18d2      	adds	r2, r2, r3
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_IncTick+0x20>)
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000010 	.word	0x20000010
 8000d58:	20000324 	.word	0x20000324

08000d5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HAL_GetTick+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000324 	.word	0x20000324

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	0002      	movs	r2, r0
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b7f      	cmp	r3, #127	; 0x7f
 8000d82:	d809      	bhi.n	8000d98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	231f      	movs	r3, #31
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_EnableIRQ+0x30>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	4091      	lsls	r1, r2
 8000d94:	000a      	movs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
  }
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0002      	movs	r2, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b7f      	cmp	r3, #127	; 0x7f
 8000db8:	d828      	bhi.n	8000e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <__NVIC_SetPriority+0xd4>)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	33c0      	adds	r3, #192	; 0xc0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	589b      	ldr	r3, [r3, r2]
 8000dca:	1dfa      	adds	r2, r7, #7
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	0011      	movs	r1, r2
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	21ff      	movs	r1, #255	; 0xff
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	22ff      	movs	r2, #255	; 0xff
 8000de8:	401a      	ands	r2, r3
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	2303      	movs	r3, #3
 8000df2:	4003      	ands	r3, r0
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df8:	481f      	ldr	r0, [pc, #124]	; (8000e78 <__NVIC_SetPriority+0xd4>)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	430a      	orrs	r2, r1
 8000e04:	33c0      	adds	r3, #192	; 0xc0
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e0a:	e031      	b.n	8000e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <__NVIC_SetPriority+0xd8>)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0019      	movs	r1, r3
 8000e14:	230f      	movs	r3, #15
 8000e16:	400b      	ands	r3, r1
 8000e18:	3b08      	subs	r3, #8
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3306      	adds	r3, #6
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	3304      	adds	r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1dfa      	adds	r2, r7, #7
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	400a      	ands	r2, r1
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	21ff      	movs	r1, #255	; 0xff
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	43d2      	mvns	r2, r2
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	22ff      	movs	r2, #255	; 0xff
 8000e44:	401a      	ands	r2, r3
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	4003      	ands	r3, r0
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <__NVIC_SetPriority+0xd8>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001c      	movs	r4, r3
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	4023      	ands	r3, r4
 8000e60:	3b08      	subs	r3, #8
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	430a      	orrs	r2, r1
 8000e66:	3306      	adds	r3, #6
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	18c3      	adds	r3, r0, r3
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b003      	add	sp, #12
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	045b      	lsls	r3, r3, #17
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d301      	bcc.n	8000e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e94:	2301      	movs	r3, #1
 8000e96:	e010      	b.n	8000eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <SysTick_Config+0x44>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ff7c 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x44>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x44>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	1c02      	adds	r2, r0, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	0002      	movs	r2, r0
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff33 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ffaf 	bl	8000e80 <SysTick_Config>
 8000f22:	0003      	movs	r3, r0
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e036      	b.n	8000fb0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2221      	movs	r2, #33	; 0x21
 8000f46:	2102      	movs	r1, #2
 8000f48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <HAL_DMA_Init+0x8c>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f9c4 	bl	8001320 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2221      	movs	r2, #33	; 0x21
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	ffffc00f 	.word	0xffffc00f

08000fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2317      	movs	r3, #23
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_DMA_Start_IT+0x24>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e04f      	b.n	8001080 <HAL_DMA_Start_IT+0xc4>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2221      	movs	r2, #33	; 0x21
 8000fec:	5c9b      	ldrb	r3, [r3, r2]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d13a      	bne.n	800106a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2101      	movs	r1, #1
 800100e:	438a      	bics	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 f954 	bl	80012c6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	210e      	movs	r1, #14
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e00f      	b.n	8001058 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	210a      	movs	r1, #10
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2104      	movs	r1, #4
 8001054:	438a      	bics	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e007      	b.n	800107a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2220      	movs	r2, #32
 800106e:	2100      	movs	r1, #0
 8001070:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001072:	2317      	movs	r3, #23
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800107a:	2317      	movs	r3, #23
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b006      	add	sp, #24
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2221      	movs	r2, #33	; 0x21
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d008      	beq.n	80010ae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e020      	b.n	80010f0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	210e      	movs	r1, #14
 80010ba:	438a      	bics	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	438a      	bics	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d6:	2101      	movs	r1, #1
 80010d8:	4091      	lsls	r1, r2
 80010da:	000a      	movs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2221      	movs	r2, #33	; 0x21
 80010e2:	2101      	movs	r1, #1
 80010e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001100:	210f      	movs	r1, #15
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2221      	movs	r2, #33	; 0x21
 800110c:	5c9b      	ldrb	r3, [r3, r2]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d006      	beq.n	8001122 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e028      	b.n	8001174 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210e      	movs	r1, #14
 800112e:	438a      	bics	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	438a      	bics	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	2101      	movs	r1, #1
 800114c:	4091      	lsls	r1, r2
 800114e:	000a      	movs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2221      	movs	r2, #33	; 0x21
 8001156:	2101      	movs	r1, #1
 8001158:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2220      	movs	r2, #32
 800115e:	2100      	movs	r1, #0
 8001160:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	0010      	movs	r0, r2
 8001172:	4798      	blx	r3
    }
  }
  return status;
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	781b      	ldrb	r3, [r3, #0]
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2204      	movs	r2, #4
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	d024      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x72>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2204      	movs	r2, #4
 80011ae:	4013      	ands	r3, r2
 80011b0:	d020      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2220      	movs	r2, #32
 80011ba:	4013      	ands	r3, r2
 80011bc:	d107      	bne.n	80011ce <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2104      	movs	r1, #4
 80011ca:	438a      	bics	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d6:	2104      	movs	r1, #4
 80011d8:	4091      	lsls	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x66>
 80011e6:	e06a      	b.n	80012be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	0010      	movs	r0, r2
 80011f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011f2:	e064      	b.n	80012be <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	2202      	movs	r2, #2
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	d02b      	beq.n	800125c <HAL_DMA_IRQHandler+0xda>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d027      	beq.n	800125c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2220      	movs	r2, #32
 8001214:	4013      	ands	r3, r2
 8001216:	d10b      	bne.n	8001230 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	210a      	movs	r1, #10
 8001224:	438a      	bics	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2221      	movs	r2, #33	; 0x21
 800122c:	2101      	movs	r1, #1
 800122e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001238:	2102      	movs	r1, #2
 800123a:	4091      	lsls	r1, r2
 800123c:	000a      	movs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2220      	movs	r2, #32
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	2b00      	cmp	r3, #0
 800124e:	d036      	beq.n	80012be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	0010      	movs	r0, r2
 8001258:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800125a:	e030      	b.n	80012be <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	2208      	movs	r2, #8
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	d028      	beq.n	80012be <HAL_DMA_IRQHandler+0x13c>
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2208      	movs	r2, #8
 8001270:	4013      	ands	r3, r2
 8001272:	d024      	beq.n	80012be <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	210e      	movs	r1, #14
 8001280:	438a      	bics	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128c:	2101      	movs	r1, #1
 800128e:	4091      	lsls	r1, r2
 8001290:	000a      	movs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2221      	movs	r2, #33	; 0x21
 800129e:	2101      	movs	r1, #1
 80012a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	0010      	movs	r0, r2
 80012ba:	4798      	blx	r3
    }
  }
}
 80012bc:	e7ff      	b.n	80012be <HAL_DMA_IRQHandler+0x13c>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	2101      	movs	r1, #1
 80012de:	4091      	lsls	r1, r2
 80012e0:	000a      	movs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d108      	bne.n	8001306 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001304:	e007      	b.n	8001316 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	60da      	str	r2, [r3, #12]
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <DMA_CalcBaseAndBitshift+0x30>)
 800132e:	4694      	mov	ip, r2
 8001330:	4463      	add	r3, ip
 8001332:	2114      	movs	r1, #20
 8001334:	0018      	movs	r0, r3
 8001336:	f7fe fee7 	bl	8000108 <__udivsi3>
 800133a:	0003      	movs	r3, r0
 800133c:	009a      	lsls	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a03      	ldr	r2, [pc, #12]	; (8001354 <DMA_CalcBaseAndBitshift+0x34>)
 8001346:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	bffdfff8 	.word	0xbffdfff8
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e14f      	b.n	8001608 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x28>
 800137e:	e140      	b.n	8001602 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	2201      	movs	r2, #1
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	4013      	ands	r3, r2
 8001402:	2b03      	cmp	r3, #3
 8001404:	d017      	beq.n	8001436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	58d3      	ldr	r3, [r2, r3]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2207      	movs	r2, #7
 8001454:	4013      	ands	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2107      	movs	r1, #7
 800146e:	400b      	ands	r3, r1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	401a      	ands	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	23c0      	movs	r3, #192	; 0xc0
 80014c4:	029b      	lsls	r3, r3, #10
 80014c6:	4013      	ands	r3, r2
 80014c8:	d100      	bne.n	80014cc <HAL_GPIO_Init+0x174>
 80014ca:	e09a      	b.n	8001602 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014cc:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_GPIO_Init+0x2c8>)
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_GPIO_Init+0x2c8>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x2c8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x2cc>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	589b      	ldr	r3, [r3, r2]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	43da      	mvns	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	2390      	movs	r3, #144	; 0x90
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	429a      	cmp	r2, r3
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x1e2>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a44      	ldr	r2, [pc, #272]	; (8001628 <HAL_GPIO_Init+0x2d0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x1de>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a43      	ldr	r2, [pc, #268]	; (800162c <HAL_GPIO_Init+0x2d4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x1da>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_GPIO_Init+0x2d8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x1d6>
 800152a:	2303      	movs	r3, #3
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x1e4>
 800152e:	2305      	movs	r3, #5
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x1e4>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x1e4>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x1e4>
 800153a:	2300      	movs	r3, #0
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	2103      	movs	r1, #3
 8001540:	400a      	ands	r2, r1
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4093      	lsls	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_GPIO_Init+0x2cc>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	035b      	lsls	r3, r3, #13
 8001572:	4013      	ands	r3, r2
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	039b      	lsls	r3, r3, #14
 800159c:	4013      	ands	r3, r2
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	4013      	ands	r3, r2
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	4013      	ands	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	40da      	lsrs	r2, r3
 8001610:	1e13      	subs	r3, r2, #0
 8001612:	d000      	beq.n	8001616 <HAL_GPIO_Init+0x2be>
 8001614:	e6a8      	b.n	8001368 <HAL_GPIO_Init+0x10>
  } 
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	0008      	movs	r0, r1
 8001642:	0011      	movs	r1, r2
 8001644:	1cbb      	adds	r3, r7, #2
 8001646:	1c02      	adds	r2, r0, #0
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	1c7b      	adds	r3, r7, #1
 800164c:	1c0a      	adds	r2, r1, #0
 800164e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001650:	1c7b      	adds	r3, r7, #1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001658:	1cbb      	adds	r3, r7, #2
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e301      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	4013      	ands	r3, r2
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x1e>
 8001690:	e08d      	b.n	80017ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001692:	4bc3      	ldr	r3, [pc, #780]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	220c      	movs	r2, #12
 8001698:	4013      	ands	r3, r2
 800169a:	2b04      	cmp	r3, #4
 800169c:	d00e      	beq.n	80016bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800169e:	4bc0      	ldr	r3, [pc, #768]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	220c      	movs	r2, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x64>
 80016aa:	4bbd      	ldr	r3, [pc, #756]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	025b      	lsls	r3, r3, #9
 80016b2:	401a      	ands	r2, r3
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4bb8      	ldr	r3, [pc, #736]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	029b      	lsls	r3, r3, #10
 80016c4:	4013      	ands	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_RCC_OscConfig+0x56>
 80016c8:	e070      	b.n	80017ac <HAL_RCC_OscConfig+0x138>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d000      	beq.n	80016d4 <HAL_RCC_OscConfig+0x60>
 80016d2:	e06b      	b.n	80017ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e2d8      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x7c>
 80016e0:	4baf      	ldr	r3, [pc, #700]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0249      	lsls	r1, r1, #9
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e02f      	b.n	8001750 <HAL_RCC_OscConfig+0xdc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x9e>
 80016f8:	4ba9      	ldr	r3, [pc, #676]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4ba8      	ldr	r3, [pc, #672]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	49a9      	ldr	r1, [pc, #676]	; (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4ba6      	ldr	r3, [pc, #664]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4ba5      	ldr	r3, [pc, #660]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800170a:	49a7      	ldr	r1, [pc, #668]	; (80019a8 <HAL_RCC_OscConfig+0x334>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e01e      	b.n	8001750 <HAL_RCC_OscConfig+0xdc>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10e      	bne.n	8001738 <HAL_RCC_OscConfig+0xc4>
 800171a:	4ba1      	ldr	r3, [pc, #644]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4ba0      	ldr	r3, [pc, #640]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	02c9      	lsls	r1, r1, #11
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	4b9d      	ldr	r3, [pc, #628]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b9c      	ldr	r3, [pc, #624]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	0249      	lsls	r1, r1, #9
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0xdc>
 8001738:	4b99      	ldr	r3, [pc, #612]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800173e:	4999      	ldr	r1, [pc, #612]	; (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001740:	400a      	ands	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	4b96      	ldr	r3, [pc, #600]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b95      	ldr	r3, [pc, #596]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800174a:	4997      	ldr	r1, [pc, #604]	; (80019a8 <HAL_RCC_OscConfig+0x334>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d014      	beq.n	8001782 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb00 	bl	8000d5c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001762:	f7ff fafb 	bl	8000d5c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b64      	cmp	r3, #100	; 0x64
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e28a      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001774:	4b8a      	ldr	r3, [pc, #552]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0xee>
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff faeb 	bl	8000d5c <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fae6 	bl	8000d5c <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e275      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	029b      	lsls	r3, r3, #10
 80017a6:	4013      	ands	r3, r2
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x118>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d100      	bne.n	80017ba <HAL_RCC_OscConfig+0x146>
 80017b8:	e069      	b.n	800188e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017ba:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	220c      	movs	r2, #12
 80017c0:	4013      	ands	r3, r2
 80017c2:	d00b      	beq.n	80017dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d11c      	bne.n	800180a <HAL_RCC_OscConfig+0x196>
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	025b      	lsls	r3, r3, #9
 80017d8:	4013      	ands	r3, r2
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017dc:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x17e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e24b      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b6b      	ldr	r3, [pc, #428]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	22f8      	movs	r2, #248	; 0xf8
 80017f8:	4393      	bics	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	00da      	lsls	r2, r3, #3
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001808:	e041      	b.n	800188e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d024      	beq.n	800185c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001818:	2101      	movs	r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fa9d 	bl	8000d5c <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fa98 	bl	8000d5c <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e227      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d0f1      	beq.n	8001828 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	22f8      	movs	r2, #248	; 0xf8
 800184a:	4393      	bics	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00da      	lsls	r2, r3, #3
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e018      	b.n	800188e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001862:	2101      	movs	r1, #1
 8001864:	438a      	bics	r2, r1
 8001866:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fa78 	bl	8000d5c <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fa73 	bl	8000d5c <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e202      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001884:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d1f1      	bne.n	8001872 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2208      	movs	r2, #8
 8001894:	4013      	ands	r3, r2
 8001896:	d036      	beq.n	8001906 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d019      	beq.n	80018d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a4:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fa56 	bl	8000d5c <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b6:	f7ff fa51 	bl	8000d5c <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1e0      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d0f1      	beq.n	80018b6 <HAL_RCC_OscConfig+0x242>
 80018d2:	e018      	b.n	8001906 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80018da:	2101      	movs	r1, #1
 80018dc:	438a      	bics	r2, r1
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fa3c 	bl	8000d5c <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fa37 	bl	8000d5c <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1c6      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d1f1      	bne.n	80018ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2204      	movs	r2, #4
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x29e>
 8001910:	e0b4      	b.n	8001a7c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	201f      	movs	r0, #31
 8001914:	183b      	adds	r3, r7, r0
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	055b      	lsls	r3, r3, #21
 8001922:	4013      	ands	r3, r2
 8001924:	d110      	bne.n	8001948 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0549      	lsls	r1, r1, #21
 8001930:	430a      	orrs	r2, r1
 8001932:	61da      	str	r2, [r3, #28]
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	055b      	lsls	r3, r3, #21
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001942:	183b      	adds	r3, r7, r0
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_RCC_OscConfig+0x338>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d11a      	bne.n	800198a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_RCC_OscConfig+0x338>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_RCC_OscConfig+0x338>)
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	0049      	lsls	r1, r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001962:	f7ff f9fb 	bl	8000d5c <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff f9f6 	bl	8000d5c <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e185      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x338>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4013      	ands	r3, r2
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x33c>
 8001992:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001994:	6a1a      	ldr	r2, [r3, #32]
 8001996:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_RCC_OscConfig+0x32c>)
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	621a      	str	r2, [r3, #32]
 800199e:	e035      	b.n	8001a0c <HAL_RCC_OscConfig+0x398>
 80019a0:	40021000 	.word	0x40021000
 80019a4:	fffeffff 	.word	0xfffeffff
 80019a8:	fffbffff 	.word	0xfffbffff
 80019ac:	40007000 	.word	0x40007000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x35e>
 80019b8:	4bb6      	ldr	r3, [pc, #728]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	4bb5      	ldr	r3, [pc, #724]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019be:	2101      	movs	r1, #1
 80019c0:	438a      	bics	r2, r1
 80019c2:	621a      	str	r2, [r3, #32]
 80019c4:	4bb3      	ldr	r3, [pc, #716]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	4bb2      	ldr	r3, [pc, #712]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019ca:	2104      	movs	r1, #4
 80019cc:	438a      	bics	r2, r1
 80019ce:	621a      	str	r2, [r3, #32]
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x398>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x380>
 80019da:	4bae      	ldr	r3, [pc, #696]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	4bad      	ldr	r3, [pc, #692]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019e0:	2104      	movs	r1, #4
 80019e2:	430a      	orrs	r2, r1
 80019e4:	621a      	str	r2, [r3, #32]
 80019e6:	4bab      	ldr	r3, [pc, #684]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	4baa      	ldr	r3, [pc, #680]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	621a      	str	r2, [r3, #32]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x398>
 80019f4:	4ba7      	ldr	r3, [pc, #668]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	4ba6      	ldr	r3, [pc, #664]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	438a      	bics	r2, r1
 80019fe:	621a      	str	r2, [r3, #32]
 8001a00:	4ba4      	ldr	r3, [pc, #656]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4ba3      	ldr	r3, [pc, #652]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a06:	2104      	movs	r1, #4
 8001a08:	438a      	bics	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d014      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f9a2 	bl	8000d5c <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e009      	b.n	8001a32 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f99d 	bl	8000d5c <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4a9b      	ldr	r2, [pc, #620]	; (8001c98 <HAL_RCC_OscConfig+0x624>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e12b      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	4b98      	ldr	r3, [pc, #608]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
 8001a3c:	e013      	b.n	8001a66 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f98d 	bl	8000d5c <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	e009      	b.n	8001a5c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff f988 	bl	8000d5c <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4a91      	ldr	r2, [pc, #580]	; (8001c98 <HAL_RCC_OscConfig+0x624>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e116      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	4b8d      	ldr	r3, [pc, #564]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a66:	231f      	movs	r3, #31
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b88      	ldr	r3, [pc, #544]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	4b87      	ldr	r3, [pc, #540]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a76:	4989      	ldr	r1, [pc, #548]	; (8001c9c <HAL_RCC_OscConfig+0x628>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2210      	movs	r2, #16
 8001a82:	4013      	ands	r3, r2
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d12a      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a8e:	4b81      	ldr	r3, [pc, #516]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a92:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a94:	2104      	movs	r1, #4
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a9a:	4b7e      	ldr	r3, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9e:	4b7d      	ldr	r3, [pc, #500]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f959 	bl	8000d5c <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ab0:	f7ff f954 	bl	8000d5c <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0e3      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ac2:	4b74      	ldr	r3, [pc, #464]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d0f1      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001acc:	4b71      	ldr	r3, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	22f8      	movs	r2, #248	; 0xf8
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	00da      	lsls	r2, r3, #3
 8001adc:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae2:	e034      	b.n	8001b4e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	3305      	adds	r3, #5
 8001aea:	d111      	bne.n	8001b10 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001af2:	2104      	movs	r1, #4
 8001af4:	438a      	bics	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001af8:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	22f8      	movs	r2, #248	; 0xf8
 8001afe:	4393      	bics	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	00da      	lsls	r2, r3, #3
 8001b08:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b0e:	e01e      	b.n	8001b4e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b10:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b14:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b16:	2104      	movs	r1, #4
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b20:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	438a      	bics	r2, r1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff f918 	bl	8000d5c <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b32:	f7ff f913 	bl	8000d5c <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0a2      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d1f1      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d100      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4e4>
 8001b56:	e097      	b.n	8001c88 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b58:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d100      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4f2>
 8001b64:	e06b      	b.n	8001c3e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d14c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b74:	494a      	ldr	r1, [pc, #296]	; (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f8ef 	bl	8000d5c <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f8ea 	bl	8000d5c <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e079      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	049b      	lsls	r3, r3, #18
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	4393      	bics	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <HAL_RCC_OscConfig+0x630>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0449      	lsls	r1, r1, #17
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f8bd 	bl	8000d5c <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f8b8 	bl	8000d5c <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e047      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	049b      	lsls	r3, r3, #18
 8001c02:	4013      	ands	r3, r2
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x574>
 8001c06:	e03f      	b.n	8001c88 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	4924      	ldr	r1, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff f8a2 	bl	8000d5c <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f89d 	bl	8000d5c <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e02c      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	049b      	lsls	r3, r3, #18
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5aa>
 8001c3c:	e024      	b.n	8001c88 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e01f      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x620>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	220f      	movs	r2, #15
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	23f0      	movs	r3, #240	; 0xf0
 8001c78:	039b      	lsls	r3, r3, #14
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b008      	add	sp, #32
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	40021000 	.word	0x40021000
 8001c98:	00001388 	.word	0x00001388
 8001c9c:	efffffff 	.word	0xefffffff
 8001ca0:	feffffff 	.word	0xfeffffff
 8001ca4:	ffc2ffff 	.word	0xffc2ffff

08001ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b3      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d911      	bls.n	8001cee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e09a      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d015      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d006      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d02:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d08:	21e0      	movs	r1, #224	; 0xe0
 8001d0a:	00c9      	lsls	r1, r1, #3
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	22f0      	movs	r2, #240	; 0xf0
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d040      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d114      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06e      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	049b      	lsls	r3, r3, #18
 8001d56:	4013      	ands	r3, r2
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e062      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e05b      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7fe ffec 	bl	8000d5c <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8a:	f7fe ffe7 	bl	8000d5c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_RCC_ClockConfig+0x18c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e042      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	220c      	movs	r2, #12
 8001da4:	401a      	ands	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1ec      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d211      	bcs.n	8001de2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4393      	bics	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_RCC_ClockConfig+0x184>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e020      	b.n	8001e24 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2204      	movs	r2, #4
 8001de8:	4013      	ands	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_RCC_ClockConfig+0x190>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e00:	f000 f820 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e04:	0001      	movs	r1, r0
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x188>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	4013      	ands	r3, r2
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x194>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	000a      	movs	r2, r1
 8001e16:	40da      	lsrs	r2, r3
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x198>)
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f7fe ff57 	bl	8000cd0 <HAL_InitTick>
  
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	00001388 	.word	0x00001388
 8001e38:	fffff8ff 	.word	0xfffff8ff
 8001e3c:	08003ee8 	.word	0x08003ee8
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	220c      	movs	r2, #12
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x30>
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x36>
 8001e72:	e02c      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	613b      	str	r3, [r7, #16]
      break;
 8001e78:	e02c      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	220f      	movs	r2, #15
 8001e80:	4013      	ands	r3, r2
 8001e82:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	4013      	ands	r3, r2
 8001e90:	4a16      	ldr	r2, [pc, #88]	; (8001eec <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ea4:	f7fe f930 	bl	8000108 <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	001a      	movs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4353      	muls	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e009      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	000a      	movs	r2, r1
 8001eb8:	0152      	lsls	r2, r2, #5
 8001eba:	1a52      	subs	r2, r2, r1
 8001ebc:	0193      	lsls	r3, r2, #6
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	185b      	adds	r3, r3, r1
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
      break;
 8001ecc:	e002      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed0:	613b      	str	r3, [r7, #16]
      break;
 8001ed2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b006      	add	sp, #24
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	007a1200 	.word	0x007a1200
 8001ee8:	08003f00 	.word	0x08003f00
 8001eec:	08003f10 	.word	0x08003f10

08001ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000008 	.word	0x20000008

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f08:	f7ff fff2 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	40d9      	lsrs	r1, r3
 8001f1e:	000b      	movs	r3, r1
}    
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003ef8 	.word	0x08003ef8

08001f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0a8      	b.n	8002094 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	2382      	movs	r3, #130	; 0x82
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d009      	beq.n	8001f6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
 8001f5c:	e005      	b.n	8001f6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	225d      	movs	r2, #93	; 0x5d
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	225c      	movs	r2, #92	; 0x5c
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe fc98 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	225d      	movs	r2, #93	; 0x5d
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	23e0      	movs	r3, #224	; 0xe0
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d902      	bls.n	8001fb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e002      	b.n	8001fbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	015b      	lsls	r3, r3, #5
 8001fba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	23f0      	movs	r3, #240	; 0xf0
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d008      	beq.n	8001fda <HAL_SPI_Init+0xaa>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	23e0      	movs	r3, #224	; 0xe0
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d002      	beq.n	8001fda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	2382      	movs	r3, #130	; 0x82
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	2384      	movs	r3, #132	; 0x84
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	400b      	ands	r3, r1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2101      	movs	r1, #1
 8002000:	400b      	ands	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6999      	ldr	r1, [r3, #24]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	400b      	ands	r3, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2138      	movs	r1, #56	; 0x38
 8002016:	400b      	ands	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	400b      	ands	r3, r1
 8002022:	431a      	orrs	r2, r3
 8002024:	0011      	movs	r1, r2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	401a      	ands	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	2204      	movs	r2, #4
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2110      	movs	r1, #16
 8002048:	400b      	ands	r3, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002050:	2108      	movs	r1, #8
 8002052:	400b      	ands	r3, r1
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	23f0      	movs	r3, #240	; 0xf0
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	400b      	ands	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	0011      	movs	r1, r2
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4907      	ldr	r1, [pc, #28]	; (800209c <HAL_SPI_Init+0x16c>)
 8002080:	400a      	ands	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	225d      	movs	r2, #93	; 0x5d
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b004      	add	sp, #16
 800209a:	bd80      	pop	{r7, pc}
 800209c:	fffff7ff 	.word	0xfffff7ff

080020a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	001a      	movs	r2, r3
 80020be:	2301      	movs	r3, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d10f      	bne.n	80020e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020ca:	d00b      	beq.n	80020e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	001a      	movs	r2, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d005      	beq.n	80020e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	0010      	movs	r0, r2
 80020e0:	4798      	blx	r3
    return;
 80020e2:	e0d5      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	001a      	movs	r2, r3
 80020ea:	2301      	movs	r3, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d00b      	beq.n	8002108 <HAL_SPI_IRQHandler+0x68>
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	09db      	lsrs	r3, r3, #7
 80020f4:	001a      	movs	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d005      	beq.n	8002108 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	0010      	movs	r0, r2
 8002104:	4798      	blx	r3
    return;
 8002106:	e0c3      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	001a      	movs	r2, r3
 800210e:	2301      	movs	r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d10c      	bne.n	800212e <HAL_SPI_IRQHandler+0x8e>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	001a      	movs	r2, r3
 800211a:	2301      	movs	r3, #1
 800211c:	4013      	ands	r3, r2
 800211e:	d106      	bne.n	800212e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	001a      	movs	r2, r3
 8002126:	2301      	movs	r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d100      	bne.n	800212e <HAL_SPI_IRQHandler+0x8e>
 800212c:	e0b0      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	001a      	movs	r2, r3
 8002134:	2301      	movs	r3, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d100      	bne.n	800213c <HAL_SPI_IRQHandler+0x9c>
 800213a:	e0a9      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	001a      	movs	r2, r3
 8002142:	2301      	movs	r3, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d023      	beq.n	8002190 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	225d      	movs	r2, #93	; 0x5d
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d011      	beq.n	8002178 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002158:	2204      	movs	r2, #4
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	e00b      	b.n	8002190 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
        return;
 800218e:	e07f      	b.n	8002290 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	001a      	movs	r2, r3
 8002196:	2301      	movs	r3, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d014      	beq.n	80021c6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a0:	2201      	movs	r2, #1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	001a      	movs	r2, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00c      	beq.n	80021ec <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	2208      	movs	r2, #8
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d04c      	beq.n	800228e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	21e0      	movs	r1, #224	; 0xe0
 8002200:	438a      	bics	r2, r1
 8002202:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	225d      	movs	r2, #93	; 0x5d
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d103      	bne.n	800221c <HAL_SPI_IRQHandler+0x17c>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d032      	beq.n	8002282 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2103      	movs	r1, #3
 8002228:	438a      	bics	r2, r1
 800222a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_SPI_IRQHandler+0x1f8>)
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	0018      	movs	r0, r3
 8002242:	f7fe ff59 	bl	80010f8 <HAL_DMA_Abort_IT>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d005      	beq.n	8002256 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_SPI_IRQHandler+0x1f8>)
 8002264:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe ff44 	bl	80010f8 <HAL_DMA_Abort_IT>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d00b      	beq.n	800228c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002280:	e004      	b.n	800228c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f809 	bl	800229c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800228a:	e000      	b.n	800228e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800228c:	46c0      	nop			; (mov r8, r8)
    return;
 800228e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002290:	46bd      	mov	sp, r7
 8002292:	b008      	add	sp, #32
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	080022ad 	.word	0x080022ad

0800229c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2246      	movs	r2, #70	; 0x46
 80022be:	2100      	movs	r1, #0
 80022c0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff ffe6 	bl	800229c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e042      	b.n	8002370 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	223d      	movs	r2, #61	; 0x3d
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	223c      	movs	r2, #60	; 0x3c
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f7fe fb85 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223d      	movs	r2, #61	; 0x3d
 800230a:	2102      	movs	r1, #2
 800230c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	0019      	movs	r1, r3
 8002318:	0010      	movs	r0, r2
 800231a:	f000 f879 	bl	8002410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2246      	movs	r2, #70	; 0x46
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	223e      	movs	r2, #62	; 0x3e
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	223f      	movs	r2, #63	; 0x3f
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2241      	movs	r2, #65	; 0x41
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2242      	movs	r2, #66	; 0x42
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2243      	movs	r2, #67	; 0x43
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2244      	movs	r2, #68	; 0x44
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2245      	movs	r2, #69	; 0x45
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	223d      	movs	r2, #61	; 0x3d
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223d      	movs	r2, #61	; 0x3d
 8002384:	5c9b      	ldrb	r3, [r3, r2]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d001      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e035      	b.n	80023fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223d      	movs	r2, #61	; 0x3d
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a15      	ldr	r2, [pc, #84]	; (8002404 <HAL_TIM_Base_Start_IT+0x8c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x4e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a14      	ldr	r2, [pc, #80]	; (8002408 <HAL_TIM_Base_Start_IT+0x90>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x4e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_TIM_Base_Start_IT+0x94>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d111      	bne.n	80023ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d010      	beq.n	80023fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e8:	e007      	b.n	80023fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40000400 	.word	0x40000400
 800240c:	40014000 	.word	0x40014000

08002410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <TIM_Base_SetConfig+0xd0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_Base_SetConfig+0x20>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a2e      	ldr	r2, [pc, #184]	; (80024e4 <TIM_Base_SetConfig+0xd4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d108      	bne.n	8002442 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2270      	movs	r2, #112	; 0x70
 8002434:	4393      	bics	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <TIM_Base_SetConfig+0xd0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <TIM_Base_SetConfig+0x62>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <TIM_Base_SetConfig+0xd4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00f      	beq.n	8002472 <TIM_Base_SetConfig+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <TIM_Base_SetConfig+0xd8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00b      	beq.n	8002472 <TIM_Base_SetConfig+0x62>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a23      	ldr	r2, [pc, #140]	; (80024ec <TIM_Base_SetConfig+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <TIM_Base_SetConfig+0x62>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <TIM_Base_SetConfig+0xe0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d003      	beq.n	8002472 <TIM_Base_SetConfig+0x62>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <TIM_Base_SetConfig+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d108      	bne.n	8002484 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <TIM_Base_SetConfig+0xe8>)
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	4393      	bics	r3, r2
 800248a:	001a      	movs	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <TIM_Base_SetConfig+0xd0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0xba>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <TIM_Base_SetConfig+0xdc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0xba>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <TIM_Base_SetConfig+0xe0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0xba>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <TIM_Base_SetConfig+0xe4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d103      	bne.n	80024d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	615a      	str	r2, [r3, #20]
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40002000 	.word	0x40002000
 80024ec:	40014000 	.word	0x40014000
 80024f0:	40014400 	.word	0x40014400
 80024f4:	40014800 	.word	0x40014800
 80024f8:	fffffcff 	.word	0xfffffcff

080024fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e044      	b.n	8002598 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2278      	movs	r2, #120	; 0x78
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe fa93 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2224      	movs	r2, #36	; 0x24
 800252a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fc9c 	bl	8002e7c <UART_SetConfig>
 8002544:	0003      	movs	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e024      	b.n	8002598 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 fdcf 	bl	80030fc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	490d      	ldr	r1, [pc, #52]	; (80025a0 <HAL_UART_Init+0xa4>)
 800256a:	400a      	ands	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2108      	movs	r1, #8
 800257a:	438a      	bics	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fe67 	bl	8003264 <UART_CheckIdleState>
 8002596:	0003      	movs	r3, r0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	fffff7ff 	.word	0xfffff7ff

080025a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	1dbb      	adds	r3, r7, #6
 80025b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	589b      	ldr	r3, [r3, r2]
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d145      	bne.n	8002648 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_UART_Receive_IT+0x26>
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e03d      	b.n	800264a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	015b      	lsls	r3, r3, #5
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d109      	bne.n	80025ee <HAL_UART_Receive_IT+0x4a>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d001      	beq.n	80025ee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e02d      	b.n	800264a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	4013      	ands	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002602:	f3ef 8310 	mrs	r3, PRIMASK
 8002606:	613b      	str	r3, [r7, #16]
  return(result);
 8002608:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	2301      	movs	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f383 8810 	msr	PRIMASK, r3
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	04c9      	lsls	r1, r1, #19
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f383 8810 	msr	PRIMASK, r3
}
 8002634:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002636:	1dbb      	adds	r3, r7, #6
 8002638:	881a      	ldrh	r2, [r3, #0]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	0018      	movs	r0, r3
 8002640:	f000 ff22 	bl	8003488 <UART_Start_Receive_IT>
 8002644:	0003      	movs	r3, r0
 8002646:	e000      	b.n	800264a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b008      	add	sp, #32
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	1dbb      	adds	r3, r7, #6
 800265e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	589b      	ldr	r3, [r3, r2]
 8002666:	2b20      	cmp	r3, #32
 8002668:	d145      	bne.n	80026f6 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_UART_Receive_DMA+0x26>
 8002670:	1dbb      	adds	r3, r7, #6
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e03d      	b.n	80026f8 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	015b      	lsls	r3, r3, #5
 8002684:	429a      	cmp	r2, r3
 8002686:	d109      	bne.n	800269c <HAL_UART_Receive_DMA+0x4a>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d001      	beq.n	800269c <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02d      	b.n	80026f8 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	4013      	ands	r3, r2
 80026ae:	d019      	beq.n	80026e4 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b0:	f3ef 8310 	mrs	r3, PRIMASK
 80026b4:	613b      	str	r3, [r7, #16]
  return(result);
 80026b6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	2301      	movs	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	04c9      	lsls	r1, r1, #19
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f383 8810 	msr	PRIMASK, r3
}
 80026e2:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026e4:	1dbb      	adds	r3, r7, #6
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 ff81 	bl	80035f4 <UART_Start_Receive_DMA>
 80026f2:	0003      	movs	r3, r0
 80026f4:	e000      	b.n	80026f8 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b008      	add	sp, #32
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b092      	sub	sp, #72	; 0x48
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002708:	f3ef 8310 	mrs	r3, PRIMASK
 800270c:	623b      	str	r3, [r7, #32]
  return(result);
 800270e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
 8002712:	2301      	movs	r3, #1
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	f383 8810 	msr	PRIMASK, r3
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4957      	ldr	r1, [pc, #348]	; (8002888 <HAL_UART_AbortReceive_IT+0x188>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	f383 8810 	msr	PRIMASK, r3
}
 8002738:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273a:	f3ef 8310 	mrs	r3, PRIMASK
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	643b      	str	r3, [r7, #64]	; 0x40
 8002744:	2301      	movs	r3, #1
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002770:	2b01      	cmp	r3, #1
 8002772:	d118      	bne.n	80027a6 <HAL_UART_AbortReceive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002774:	f3ef 8310 	mrs	r3, PRIMASK
 8002778:	617b      	str	r3, [r7, #20]
  return(result);
 800277a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277e:	2301      	movs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2110      	movs	r1, #16
 8002796:	438a      	bics	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f383 8810 	msr	PRIMASK, r3
}
 80027a4:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2240      	movs	r2, #64	; 0x40
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d14e      	bne.n	8002852 <HAL_UART_AbortReceive_IT+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b4:	f3ef 8310 	mrs	r3, PRIMASK
 80027b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80027ba:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80027be:	2301      	movs	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	438a      	bics	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f383 8810 	msr	PRIMASK, r3
}
 80027e4:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d012      	beq.n	8002814 <HAL_UART_AbortReceive_IT+0x114>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_UART_AbortReceive_IT+0x18c>)
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fe fc7c 	bl	80010f8 <HAL_DMA_Abort_IT>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d03c      	beq.n	800287e <HAL_UART_AbortReceive_IT+0x17e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	0018      	movs	r0, r3
 8002810:	4790      	blx	r2
 8002812:	e034      	b.n	800287e <HAL_UART_AbortReceive_IT+0x17e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	225a      	movs	r2, #90	; 0x5a
 8002818:	2100      	movs	r1, #0
 800281a:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	220f      	movs	r2, #15
 8002828:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2108      	movs	r1, #8
 8002836:	430a      	orrs	r2, r1
 8002838:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	2120      	movs	r1, #32
 8002840:	5099      	str	r1, [r3, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 faf8 	bl	8002e40 <HAL_UART_AbortReceiveCpltCallback>
 8002850:	e015      	b.n	800287e <HAL_UART_AbortReceive_IT+0x17e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	225a      	movs	r2, #90	; 0x5a
 8002856:	2100      	movs	r1, #0
 8002858:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	220f      	movs	r2, #15
 8002866:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	2120      	movs	r1, #32
 800286e:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 fae1 	bl	8002e40 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b012      	add	sp, #72	; 0x48
 8002886:	bd80      	pop	{r7, pc}
 8002888:	fffffedf 	.word	0xfffffedf
 800288c:	08003a65 	.word	0x08003a65

08002890 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b0ab      	sub	sp, #172	; 0xac
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	22a4      	movs	r2, #164	; 0xa4
 80028a0:	18b9      	adds	r1, r7, r2
 80028a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	20a0      	movs	r0, #160	; 0xa0
 80028ac:	1839      	adds	r1, r7, r0
 80028ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	219c      	movs	r1, #156	; 0x9c
 80028b8:	1879      	adds	r1, r7, r1
 80028ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028bc:	0011      	movs	r1, r2
 80028be:	18bb      	adds	r3, r7, r2
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a99      	ldr	r2, [pc, #612]	; (8002b28 <HAL_UART_IRQHandler+0x298>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	2298      	movs	r2, #152	; 0x98
 80028c8:	18bc      	adds	r4, r7, r2
 80028ca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80028cc:	18bb      	adds	r3, r7, r2
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d114      	bne.n	80028fe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2220      	movs	r2, #32
 80028da:	4013      	ands	r3, r2
 80028dc:	d00f      	beq.n	80028fe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2220      	movs	r2, #32
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00a      	beq.n	80028fe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <HAL_UART_IRQHandler+0x62>
 80028f0:	e286      	b.n	8002e00 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	0010      	movs	r0, r2
 80028fa:	4798      	blx	r3
      }
      return;
 80028fc:	e280      	b.n	8002e00 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028fe:	2398      	movs	r3, #152	; 0x98
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d100      	bne.n	800290a <HAL_UART_IRQHandler+0x7a>
 8002908:	e114      	b.n	8002b34 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800290a:	239c      	movs	r3, #156	; 0x9c
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d106      	bne.n	8002924 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a83      	ldr	r2, [pc, #524]	; (8002b2c <HAL_UART_IRQHandler+0x29c>)
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_UART_IRQHandler+0x94>
 8002922:	e107      	b.n	8002b34 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002924:	23a4      	movs	r3, #164	; 0xa4
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d012      	beq.n	8002956 <HAL_UART_IRQHandler+0xc6>
 8002930:	23a0      	movs	r3, #160	; 0xa0
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d00b      	beq.n	8002956 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2284      	movs	r2, #132	; 0x84
 800294a:	589b      	ldr	r3, [r3, r2]
 800294c:	2201      	movs	r2, #1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2184      	movs	r1, #132	; 0x84
 8002954:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002956:	23a4      	movs	r3, #164	; 0xa4
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d011      	beq.n	8002986 <HAL_UART_IRQHandler+0xf6>
 8002962:	239c      	movs	r3, #156	; 0x9c
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2201      	movs	r2, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d00b      	beq.n	8002986 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2202      	movs	r2, #2
 8002974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2284      	movs	r2, #132	; 0x84
 800297a:	589b      	ldr	r3, [r3, r2]
 800297c:	2204      	movs	r2, #4
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2184      	movs	r1, #132	; 0x84
 8002984:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002986:	23a4      	movs	r3, #164	; 0xa4
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2204      	movs	r2, #4
 800298e:	4013      	ands	r3, r2
 8002990:	d011      	beq.n	80029b6 <HAL_UART_IRQHandler+0x126>
 8002992:	239c      	movs	r3, #156	; 0x9c
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d00b      	beq.n	80029b6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2204      	movs	r2, #4
 80029a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2284      	movs	r2, #132	; 0x84
 80029aa:	589b      	ldr	r3, [r3, r2]
 80029ac:	2202      	movs	r2, #2
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2184      	movs	r1, #132	; 0x84
 80029b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029b6:	23a4      	movs	r3, #164	; 0xa4
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2208      	movs	r2, #8
 80029be:	4013      	ands	r3, r2
 80029c0:	d017      	beq.n	80029f2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029c2:	23a0      	movs	r3, #160	; 0xa0
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2220      	movs	r2, #32
 80029ca:	4013      	ands	r3, r2
 80029cc:	d105      	bne.n	80029da <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029ce:	239c      	movs	r3, #156	; 0x9c
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2201      	movs	r2, #1
 80029d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029d8:	d00b      	beq.n	80029f2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2208      	movs	r2, #8
 80029e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2284      	movs	r2, #132	; 0x84
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	2208      	movs	r2, #8
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2184      	movs	r1, #132	; 0x84
 80029f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029f2:	23a4      	movs	r3, #164	; 0xa4
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	4013      	ands	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_UART_IRQHandler+0x198>
 8002a00:	23a0      	movs	r3, #160	; 0xa0
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	04db      	lsls	r3, r3, #19
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00c      	beq.n	8002a28 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2284      	movs	r2, #132	; 0x84
 8002a1c:	589b      	ldr	r3, [r3, r2]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2184      	movs	r1, #132	; 0x84
 8002a26:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2284      	movs	r2, #132	; 0x84
 8002a2c:	589b      	ldr	r3, [r3, r2]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d100      	bne.n	8002a34 <HAL_UART_IRQHandler+0x1a4>
 8002a32:	e1e7      	b.n	8002e04 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a34:	23a4      	movs	r3, #164	; 0xa4
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a40:	23a0      	movs	r3, #160	; 0xa0
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2220      	movs	r2, #32
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d008      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	0010      	movs	r0, r2
 8002a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2284      	movs	r2, #132	; 0x84
 8002a62:	589b      	ldr	r3, [r3, r2]
 8002a64:	2194      	movs	r1, #148	; 0x94
 8002a66:	187a      	adds	r2, r7, r1
 8002a68:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d004      	beq.n	8002a82 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2228      	movs	r2, #40	; 0x28
 8002a7e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a80:	d047      	beq.n	8002b12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fe79 	bl	800377c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2240      	movs	r2, #64	; 0x40
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d137      	bne.n	8002b08 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a98:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa0:	2090      	movs	r0, #144	; 0x90
 8002aa2:	183a      	adds	r2, r7, r0
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aac:	f383 8810 	msr	PRIMASK, r3
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	438a      	bics	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	183b      	adds	r3, r7, r0
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aca:	f383 8810 	msr	PRIMASK, r3
}
 8002ace:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x2a0>)
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fe fb07 	bl	80010f8 <HAL_DMA_Abort_IT>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d01a      	beq.n	8002b24 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	0018      	movs	r0, r3
 8002afa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	e012      	b.n	8002b24 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fd fb9d 	bl	8000240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b06:	e00d      	b.n	8002b24 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd fb98 	bl	8000240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e008      	b.n	8002b24 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fd fb93 	bl	8000240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2284      	movs	r2, #132	; 0x84
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b22:	e16f      	b.n	8002e04 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	46c0      	nop			; (mov r8, r8)
    return;
 8002b26:	e16d      	b.n	8002e04 <HAL_UART_IRQHandler+0x574>
 8002b28:	0000080f 	.word	0x0000080f
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003a37 	.word	0x08003a37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d000      	beq.n	8002b3e <HAL_UART_IRQHandler+0x2ae>
 8002b3c:	e139      	b.n	8002db2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	23a4      	movs	r3, #164	; 0xa4
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	4013      	ands	r3, r2
 8002b48:	d100      	bne.n	8002b4c <HAL_UART_IRQHandler+0x2bc>
 8002b4a:	e132      	b.n	8002db2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2210      	movs	r2, #16
 8002b54:	4013      	ands	r3, r2
 8002b56:	d100      	bne.n	8002b5a <HAL_UART_IRQHandler+0x2ca>
 8002b58:	e12b      	b.n	8002db2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2210      	movs	r2, #16
 8002b60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d000      	beq.n	8002b72 <HAL_UART_IRQHandler+0x2e2>
 8002b70:	e09f      	b.n	8002cb2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	217e      	movs	r1, #126	; 0x7e
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <HAL_UART_IRQHandler+0x2fa>
 8002b88:	e13e      	b.n	8002e08 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2258      	movs	r2, #88	; 0x58
 8002b8e:	5a9b      	ldrh	r3, [r3, r2]
 8002b90:	187a      	adds	r2, r7, r1
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d300      	bcc.n	8002b9a <HAL_UART_IRQHandler+0x30a>
 8002b98:	e136      	b.n	8002e08 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	187a      	adds	r2, r7, r1
 8002b9e:	215a      	movs	r1, #90	; 0x5a
 8002ba0:	8812      	ldrh	r2, [r2, #0]
 8002ba2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d06f      	beq.n	8002c8e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bae:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb8:	2301      	movs	r3, #1
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4992      	ldr	r1, [pc, #584]	; (8002e18 <HAL_UART_IRQHandler+0x588>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	f383 8810 	msr	PRIMASK, r3
}
 8002bde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be8:	677b      	str	r3, [r7, #116]	; 0x74
 8002bea:	2301      	movs	r3, #1
 8002bec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	438a      	bics	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c12:	f3ef 8310 	mrs	r3, PRIMASK
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	438a      	bics	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	2120      	movs	r1, #32
 8002c4a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c52:	f3ef 8310 	mrs	r3, PRIMASK
 8002c56:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	f383 8810 	msr	PRIMASK, r3
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2110      	movs	r1, #16
 8002c74:	438a      	bics	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7e:	f383 8810 	msr	PRIMASK, r3
}
 8002c82:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe f9fd 	bl	8001088 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2258      	movs	r2, #88	; 0x58
 8002c98:	5a9a      	ldrh	r2, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	215a      	movs	r1, #90	; 0x5a
 8002c9e:	5a5b      	ldrh	r3, [r3, r1]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f8d0 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cb0:	e0aa      	b.n	8002e08 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2258      	movs	r2, #88	; 0x58
 8002cb6:	5a99      	ldrh	r1, [r3, r2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	225a      	movs	r2, #90	; 0x5a
 8002cbc:	5a9b      	ldrh	r3, [r3, r2]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	208e      	movs	r0, #142	; 0x8e
 8002cc2:	183b      	adds	r3, r7, r0
 8002cc4:	1a8a      	subs	r2, r1, r2
 8002cc6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	225a      	movs	r2, #90	; 0x5a
 8002ccc:	5a9b      	ldrh	r3, [r3, r2]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d100      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x446>
 8002cd4:	e09a      	b.n	8002e0c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d100      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x450>
 8002cde:	e095      	b.n	8002e0c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce8:	2488      	movs	r4, #136	; 0x88
 8002cea:	193a      	adds	r2, r7, r4
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f383 8810 	msr	PRIMASK, r3
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4945      	ldr	r1, [pc, #276]	; (8002e1c <HAL_UART_IRQHandler+0x58c>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d1e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	2484      	movs	r4, #132	; 0x84
 8002d22:	193a      	adds	r2, r7, r4
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	438a      	bics	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	2120      	movs	r1, #32
 8002d56:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d64:	f3ef 8310 	mrs	r3, PRIMASK
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6c:	2480      	movs	r4, #128	; 0x80
 8002d6e:	193a      	adds	r2, r7, r4
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	2301      	movs	r3, #1
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	f383 8810 	msr	PRIMASK, r3
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2110      	movs	r1, #16
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002da2:	183b      	adds	r3, r7, r0
 8002da4:	881a      	ldrh	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0011      	movs	r1, r2
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f850 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002db0:	e02c      	b.n	8002e0c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002db2:	23a4      	movs	r3, #164	; 0xa4
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d00f      	beq.n	8002dde <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dbe:	23a0      	movs	r3, #160	; 0xa0
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01e      	beq.n	8002e10 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	0010      	movs	r0, r2
 8002dda:	4798      	blx	r3
    }
    return;
 8002ddc:	e018      	b.n	8002e10 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dde:	23a4      	movs	r3, #164	; 0xa4
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_UART_IRQHandler+0x582>
 8002dea:	23a0      	movs	r3, #160	; 0xa0
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2240      	movs	r2, #64	; 0x40
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 fe59 	bl	8003ab0 <UART_EndTransmit_IT>
    return;
 8002dfe:	e008      	b.n	8002e12 <HAL_UART_IRQHandler+0x582>
      return;
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	e006      	b.n	8002e12 <HAL_UART_IRQHandler+0x582>
    return;
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	e004      	b.n	8002e12 <HAL_UART_IRQHandler+0x582>
      return;
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	e002      	b.n	8002e12 <HAL_UART_IRQHandler+0x582>
      return;
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_IRQHandler+0x582>
    return;
 8002e10:	46c0      	nop			; (mov r8, r8)
  }

}
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b02b      	add	sp, #172	; 0xac
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	fffffeff 	.word	0xfffffeff
 8002e1c:	fffffedf 	.word	0xfffffedf

08002e20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	000a      	movs	r2, r1
 8002e5a:	1cbb      	adds	r3, r7, #2
 8002e5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b002      	add	sp, #8
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2284      	movs	r2, #132	; 0x84
 8002e72:	589b      	ldr	r3, [r3, r2]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e84:	231e      	movs	r3, #30
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a8d      	ldr	r2, [pc, #564]	; (80030e0 <UART_SetConfig+0x264>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a88      	ldr	r2, [pc, #544]	; (80030e4 <UART_SetConfig+0x268>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <UART_SetConfig+0x26c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a7b      	ldr	r2, [pc, #492]	; (80030ec <UART_SetConfig+0x270>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d127      	bne.n	8002f52 <UART_SetConfig+0xd6>
 8002f02:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <UART_SetConfig+0x274>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	2203      	movs	r2, #3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d00d      	beq.n	8002f2a <UART_SetConfig+0xae>
 8002f0e:	d81b      	bhi.n	8002f48 <UART_SetConfig+0xcc>
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d014      	beq.n	8002f3e <UART_SetConfig+0xc2>
 8002f14:	d818      	bhi.n	8002f48 <UART_SetConfig+0xcc>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <UART_SetConfig+0xa4>
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d00a      	beq.n	8002f34 <UART_SetConfig+0xb8>
 8002f1e:	e013      	b.n	8002f48 <UART_SetConfig+0xcc>
 8002f20:	231f      	movs	r3, #31
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e021      	b.n	8002f6e <UART_SetConfig+0xf2>
 8002f2a:	231f      	movs	r3, #31
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2202      	movs	r2, #2
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e01c      	b.n	8002f6e <UART_SetConfig+0xf2>
 8002f34:	231f      	movs	r3, #31
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2204      	movs	r2, #4
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e017      	b.n	8002f6e <UART_SetConfig+0xf2>
 8002f3e:	231f      	movs	r3, #31
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2208      	movs	r2, #8
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e012      	b.n	8002f6e <UART_SetConfig+0xf2>
 8002f48:	231f      	movs	r3, #31
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e00d      	b.n	8002f6e <UART_SetConfig+0xf2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a67      	ldr	r2, [pc, #412]	; (80030f4 <UART_SetConfig+0x278>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d104      	bne.n	8002f66 <UART_SetConfig+0xea>
 8002f5c:	231f      	movs	r3, #31
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e003      	b.n	8002f6e <UART_SetConfig+0xf2>
 8002f66:	231f      	movs	r3, #31
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d15c      	bne.n	8003034 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002f7a:	231f      	movs	r3, #31
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d015      	beq.n	8002fb0 <UART_SetConfig+0x134>
 8002f84:	dc18      	bgt.n	8002fb8 <UART_SetConfig+0x13c>
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00d      	beq.n	8002fa6 <UART_SetConfig+0x12a>
 8002f8a:	dc15      	bgt.n	8002fb8 <UART_SetConfig+0x13c>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <UART_SetConfig+0x11a>
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d005      	beq.n	8002fa0 <UART_SetConfig+0x124>
 8002f94:	e010      	b.n	8002fb8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f96:	f7fe ffb5 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	61bb      	str	r3, [r7, #24]
        break;
 8002f9e:	e012      	b.n	8002fc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa0:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <UART_SetConfig+0x27c>)
 8002fa2:	61bb      	str	r3, [r7, #24]
        break;
 8002fa4:	e00f      	b.n	8002fc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa6:	f7fe ff4d 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8002faa:	0003      	movs	r3, r0
 8002fac:	61bb      	str	r3, [r7, #24]
        break;
 8002fae:	e00a      	b.n	8002fc6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	61bb      	str	r3, [r7, #24]
        break;
 8002fb6:	e006      	b.n	8002fc6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fbc:	231e      	movs	r3, #30
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
        break;
 8002fc4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d100      	bne.n	8002fce <UART_SetConfig+0x152>
 8002fcc:	e07a      	b.n	80030c4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	005a      	lsls	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	18d2      	adds	r2, r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	0010      	movs	r0, r2
 8002fe2:	f7fd f891 	bl	8000108 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d91c      	bls.n	800302a <UART_SetConfig+0x1ae>
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	025b      	lsls	r3, r3, #9
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d217      	bcs.n	800302a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	200e      	movs	r0, #14
 8003000:	183b      	adds	r3, r7, r0
 8003002:	210f      	movs	r1, #15
 8003004:	438a      	bics	r2, r1
 8003006:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	2207      	movs	r2, #7
 8003010:	4013      	ands	r3, r2
 8003012:	b299      	uxth	r1, r3
 8003014:	183b      	adds	r3, r7, r0
 8003016:	183a      	adds	r2, r7, r0
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	183a      	adds	r2, r7, r0
 8003024:	8812      	ldrh	r2, [r2, #0]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	e04c      	b.n	80030c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800302a:	231e      	movs	r3, #30
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e047      	b.n	80030c4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003034:	231f      	movs	r3, #31
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d015      	beq.n	800306a <UART_SetConfig+0x1ee>
 800303e:	dc18      	bgt.n	8003072 <UART_SetConfig+0x1f6>
 8003040:	2b04      	cmp	r3, #4
 8003042:	d00d      	beq.n	8003060 <UART_SetConfig+0x1e4>
 8003044:	dc15      	bgt.n	8003072 <UART_SetConfig+0x1f6>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <UART_SetConfig+0x1d4>
 800304a:	2b02      	cmp	r3, #2
 800304c:	d005      	beq.n	800305a <UART_SetConfig+0x1de>
 800304e:	e010      	b.n	8003072 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7fe ff58 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8003054:	0003      	movs	r3, r0
 8003056:	61bb      	str	r3, [r7, #24]
        break;
 8003058:	e012      	b.n	8003080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800305a:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <UART_SetConfig+0x27c>)
 800305c:	61bb      	str	r3, [r7, #24]
        break;
 800305e:	e00f      	b.n	8003080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003060:	f7fe fef0 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8003064:	0003      	movs	r3, r0
 8003066:	61bb      	str	r3, [r7, #24]
        break;
 8003068:	e00a      	b.n	8003080 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	61bb      	str	r3, [r7, #24]
        break;
 8003070:	e006      	b.n	8003080 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003076:	231e      	movs	r3, #30
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
        break;
 800307e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01e      	beq.n	80030c4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085a      	lsrs	r2, r3, #1
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	18d2      	adds	r2, r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0019      	movs	r1, r3
 8003096:	0010      	movs	r0, r2
 8003098:	f7fd f836 	bl	8000108 <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d90a      	bls.n	80030bc <UART_SetConfig+0x240>
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d205      	bcs.n	80030bc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	e003      	b.n	80030c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80030bc:	231e      	movs	r3, #30
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80030d0:	231e      	movs	r3, #30
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b008      	add	sp, #32
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	ffff69f3 	.word	0xffff69f3
 80030e4:	ffffcfff 	.word	0xffffcfff
 80030e8:	fffff4ff 	.word	0xfffff4ff
 80030ec:	40013800 	.word	0x40013800
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40004400 	.word	0x40004400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2201      	movs	r2, #1
 800310a:	4013      	ands	r3, r2
 800310c:	d00b      	beq.n	8003126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a4a      	ldr	r2, [pc, #296]	; (8003240 <UART_AdvFeatureConfig+0x144>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2202      	movs	r2, #2
 800312c:	4013      	ands	r3, r2
 800312e:	d00b      	beq.n	8003148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a43      	ldr	r2, [pc, #268]	; (8003244 <UART_AdvFeatureConfig+0x148>)
 8003138:	4013      	ands	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d00b      	beq.n	800316a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <UART_AdvFeatureConfig+0x14c>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2208      	movs	r2, #8
 8003170:	4013      	ands	r3, r2
 8003172:	d00b      	beq.n	800318c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a34      	ldr	r2, [pc, #208]	; (800324c <UART_AdvFeatureConfig+0x150>)
 800317c:	4013      	ands	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	2210      	movs	r2, #16
 8003192:	4013      	ands	r3, r2
 8003194:	d00b      	beq.n	80031ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <UART_AdvFeatureConfig+0x154>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2220      	movs	r2, #32
 80031b4:	4013      	ands	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <UART_AdvFeatureConfig+0x158>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	4013      	ands	r3, r2
 80031d8:	d01d      	beq.n	8003216 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <UART_AdvFeatureConfig+0x15c>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	035b      	lsls	r3, r3, #13
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d10b      	bne.n	8003216 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <UART_AdvFeatureConfig+0x160>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	4013      	ands	r3, r2
 800321e:	d00b      	beq.n	8003238 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <UART_AdvFeatureConfig+0x164>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}
 8003240:	fffdffff 	.word	0xfffdffff
 8003244:	fffeffff 	.word	0xfffeffff
 8003248:	fffbffff 	.word	0xfffbffff
 800324c:	ffff7fff 	.word	0xffff7fff
 8003250:	ffffefff 	.word	0xffffefff
 8003254:	ffffdfff 	.word	0xffffdfff
 8003258:	ffefffff 	.word	0xffefffff
 800325c:	ff9fffff 	.word	0xff9fffff
 8003260:	fff7ffff 	.word	0xfff7ffff

08003264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b092      	sub	sp, #72	; 0x48
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2284      	movs	r2, #132	; 0x84
 8003270:	2100      	movs	r1, #0
 8003272:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003274:	f7fd fd72 	bl	8000d5c <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2208      	movs	r2, #8
 8003284:	4013      	ands	r3, r2
 8003286:	2b08      	cmp	r3, #8
 8003288:	d12c      	bne.n	80032e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	0391      	lsls	r1, r2, #14
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4a46      	ldr	r2, [pc, #280]	; (80033ac <UART_CheckIdleState+0x148>)
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	f000 f88c 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d021      	beq.n	80032e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a0:	f3ef 8310 	mrs	r3, PRIMASK
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032aa:	2301      	movs	r3, #1
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	438a      	bics	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2278      	movs	r2, #120	; 0x78
 80032dc:	2100      	movs	r1, #0
 80032de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e05f      	b.n	80033a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d146      	bne.n	8003380 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	03d1      	lsls	r1, r2, #15
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <UART_CheckIdleState+0x148>)
 80032fc:	9200      	str	r2, [sp, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	f000 f858 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d03b      	beq.n	8003380 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003308:	f3ef 8310 	mrs	r3, PRIMASK
 800330c:	60fb      	str	r3, [r7, #12]
  return(result);
 800330e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
 8003312:	2301      	movs	r3, #1
 8003314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4921      	ldr	r1, [pc, #132]	; (80033b0 <UART_CheckIdleState+0x14c>)
 800332a:	400a      	ands	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333a:	f3ef 8310 	mrs	r3, PRIMASK
 800333e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003340:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
 8003344:	2301      	movs	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	438a      	bics	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	2120      	movs	r1, #32
 8003372:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2278      	movs	r2, #120	; 0x78
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e011      	b.n	80033a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	2120      	movs	r1, #32
 800338c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2278      	movs	r2, #120	; 0x78
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b010      	add	sp, #64	; 0x40
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	01ffffff 	.word	0x01ffffff
 80033b0:	fffffedf 	.word	0xfffffedf

080033b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	e04b      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3301      	adds	r3, #1
 80033ca:	d048      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033cc:	f7fd fcc6 	bl	8000d5c <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e04b      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2204      	movs	r2, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	d035      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2208      	movs	r2, #8
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d111      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	0018      	movs	r0, r3
 800340c:	f000 f9b6 	bl	800377c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2284      	movs	r2, #132	; 0x84
 8003414:	2108      	movs	r1, #8
 8003416:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2278      	movs	r2, #120	; 0x78
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e02c      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	401a      	ands	r2, r3
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	429a      	cmp	r2, r3
 8003436:	d112      	bne.n	800345e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f999 	bl	800377c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2284      	movs	r2, #132	; 0x84
 800344e:	2120      	movs	r1, #32
 8003450:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2278      	movs	r2, #120	; 0x78
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e00f      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	425a      	negs	r2, r3
 800346e:	4153      	adcs	r3, r2
 8003470:	b2db      	uxtb	r3, r3
 8003472:	001a      	movs	r2, r3
 8003474:	1dfb      	adds	r3, r7, #7
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d0a4      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b090      	sub	sp, #64	; 0x40
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	1dbb      	adds	r3, r7, #6
 8003494:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1dba      	adds	r2, r7, #6
 80034a0:	2158      	movs	r1, #88	; 0x58
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1dba      	adds	r2, r7, #6
 80034aa:	215a      	movs	r1, #90	; 0x5a
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	015b      	lsls	r3, r3, #5
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10d      	bne.n	80034de <UART_Start_Receive_IT+0x56>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <UART_Start_Receive_IT+0x4c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	225c      	movs	r2, #92	; 0x5c
 80034ce:	4946      	ldr	r1, [pc, #280]	; (80035e8 <UART_Start_Receive_IT+0x160>)
 80034d0:	5299      	strh	r1, [r3, r2]
 80034d2:	e01a      	b.n	800350a <UART_Start_Receive_IT+0x82>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	225c      	movs	r2, #92	; 0x5c
 80034d8:	21ff      	movs	r1, #255	; 0xff
 80034da:	5299      	strh	r1, [r3, r2]
 80034dc:	e015      	b.n	800350a <UART_Start_Receive_IT+0x82>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <UART_Start_Receive_IT+0x7a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <UART_Start_Receive_IT+0x70>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	225c      	movs	r2, #92	; 0x5c
 80034f2:	21ff      	movs	r1, #255	; 0xff
 80034f4:	5299      	strh	r1, [r3, r2]
 80034f6:	e008      	b.n	800350a <UART_Start_Receive_IT+0x82>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	225c      	movs	r2, #92	; 0x5c
 80034fc:	217f      	movs	r1, #127	; 0x7f
 80034fe:	5299      	strh	r1, [r3, r2]
 8003500:	e003      	b.n	800350a <UART_Start_Receive_IT+0x82>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	225c      	movs	r2, #92	; 0x5c
 8003506:	2100      	movs	r1, #0
 8003508:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2284      	movs	r2, #132	; 0x84
 800350e:	2100      	movs	r1, #0
 8003510:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	2122      	movs	r1, #34	; 0x22
 8003518:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351a:	f3ef 8310 	mrs	r3, PRIMASK
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003524:	2301      	movs	r3, #1
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	f383 8810 	msr	PRIMASK, r3
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	f383 8810 	msr	PRIMASK, r3
}
 800354a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	015b      	lsls	r3, r3, #5
 8003554:	429a      	cmp	r2, r3
 8003556:	d107      	bne.n	8003568 <UART_Start_Receive_IT+0xe0>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <UART_Start_Receive_IT+0x164>)
 8003564:	669a      	str	r2, [r3, #104]	; 0x68
 8003566:	e002      	b.n	800356e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <UART_Start_Receive_IT+0x168>)
 800356c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003576:	f3ef 8310 	mrs	r3, PRIMASK
 800357a:	61fb      	str	r3, [r7, #28]
  return(result);
 800357c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
 8003580:	2301      	movs	r3, #1
 8003582:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	f383 8810 	msr	PRIMASK, r3
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2190      	movs	r1, #144	; 0x90
 8003598:	0049      	lsls	r1, r1, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	e018      	b.n	80035dc <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035aa:	f3ef 8310 	mrs	r3, PRIMASK
 80035ae:	613b      	str	r3, [r7, #16]
  return(result);
 80035b0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b4:	2301      	movs	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f383 8810 	msr	PRIMASK, r3
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2120      	movs	r1, #32
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b010      	add	sp, #64	; 0x40
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	000001ff 	.word	0x000001ff
 80035ec:	08003cc1 	.word	0x08003cc1
 80035f0:	08003b09 	.word	0x08003b09

080035f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b090      	sub	sp, #64	; 0x40
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	1dbb      	adds	r3, r7, #6
 8003600:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1dba      	adds	r2, r7, #6
 800360c:	2158      	movs	r1, #88	; 0x58
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2284      	movs	r2, #132	; 0x84
 8003616:	2100      	movs	r1, #0
 8003618:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	2122      	movs	r1, #34	; 0x22
 8003620:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	2b00      	cmp	r3, #0
 8003628:	d028      	beq.n	800367c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <UART_Start_Receive_DMA+0x134>)
 8003630:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003636:	4a3d      	ldr	r2, [pc, #244]	; (800372c <UART_Start_Receive_DMA+0x138>)
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <UART_Start_Receive_DMA+0x13c>)
 8003640:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	2200      	movs	r2, #0
 8003648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3324      	adds	r3, #36	; 0x24
 8003654:	0019      	movs	r1, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	001a      	movs	r2, r3
 800365c:	1dbb      	adds	r3, r7, #6
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	f7fd fcac 	bl	8000fbc <HAL_DMA_Start_IT>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d009      	beq.n	800367c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2284      	movs	r2, #132	; 0x84
 800366c:	2110      	movs	r1, #16
 800366e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	2120      	movs	r1, #32
 8003676:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e050      	b.n	800371e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d019      	beq.n	80036b8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003684:	f3ef 8310 	mrs	r3, PRIMASK
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	2301      	movs	r3, #1
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	f383 8810 	msr	PRIMASK, r3
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	0049      	lsls	r1, r1, #1
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	f383 8810 	msr	PRIMASK, r3
}
 80036b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b8:	f3ef 8310 	mrs	r3, PRIMASK
 80036bc:	613b      	str	r3, [r7, #16]
  return(result);
 80036be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c2:	2301      	movs	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ea:	f3ef 8310 	mrs	r3, PRIMASK
 80036ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80036f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
 80036f4:	2301      	movs	r3, #1
 80036f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2140      	movs	r1, #64	; 0x40
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b010      	add	sp, #64	; 0x40
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	08003845 	.word	0x08003845
 800372c:	08003971 	.word	0x08003971
 8003730:	080039b3 	.word	0x080039b3

08003734 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373c:	f3ef 8310 	mrs	r3, PRIMASK
 8003740:	60bb      	str	r3, [r7, #8]
  return(result);
 8003742:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	2301      	movs	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f383 8810 	msr	PRIMASK, r3
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	21c0      	movs	r1, #192	; 0xc0
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f383 8810 	msr	PRIMASK, r3
}
 800376c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b006      	add	sp, #24
 800377a:	bd80      	pop	{r7, pc}

0800377c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08e      	sub	sp, #56	; 0x38
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003784:	f3ef 8310 	mrs	r3, PRIMASK
 8003788:	617b      	str	r3, [r7, #20]
  return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4926      	ldr	r1, [pc, #152]	; (8003840 <UART_EndRxTransfer+0xc4>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ba:	623b      	str	r3, [r7, #32]
  return(result);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	438a      	bics	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f383 8810 	msr	PRIMASK, r3
}
 80037e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d118      	bne.n	8003822 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2301      	movs	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2110      	movs	r1, #16
 8003812:	438a      	bics	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	2120      	movs	r1, #32
 8003828:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b00e      	add	sp, #56	; 0x38
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	fffffedf 	.word	0xfffffedf

08003844 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b094      	sub	sp, #80	; 0x50
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b20      	cmp	r3, #32
 8003858:	d06f      	beq.n	800393a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	225a      	movs	r2, #90	; 0x5a
 800385e:	2100      	movs	r1, #0
 8003860:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003862:	f3ef 8310 	mrs	r3, PRIMASK
 8003866:	61bb      	str	r3, [r7, #24]
  return(result);
 8003868:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	2301      	movs	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	493a      	ldr	r1, [pc, #232]	; (800396c <UART_DMAReceiveCplt+0x128>)
 8003884:	400a      	ands	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003894:	f3ef 8310 	mrs	r3, PRIMASK
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	647b      	str	r3, [r7, #68]	; 0x44
 800389e:	2301      	movs	r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2101      	movs	r1, #1
 80038b6:	438a      	bics	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	f383 8810 	msr	PRIMASK, r3
}
 80038c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ce:	643b      	str	r3, [r7, #64]	; 0x40
 80038d0:	2301      	movs	r3, #1
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2140      	movs	r1, #64	; 0x40
 80038e8:	438a      	bics	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	f383 8810 	msr	PRIMASK, r3
}
 80038f6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	2120      	movs	r1, #32
 80038fe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	2b01      	cmp	r3, #1
 8003906:	d118      	bne.n	800393a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	60fb      	str	r3, [r7, #12]
  return(result);
 800390e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003912:	2301      	movs	r3, #1
 8003914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2110      	movs	r1, #16
 800392a:	438a      	bics	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	2200      	movs	r2, #0
 800393e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	2b01      	cmp	r3, #1
 8003946:	d108      	bne.n	800395a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394a:	2258      	movs	r2, #88	; 0x58
 800394c:	5a9a      	ldrh	r2, [r3, r2]
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	0011      	movs	r1, r2
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fa7c 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003958:	e003      	b.n	8003962 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	0018      	movs	r0, r3
 800395e:	f7fc fc5f 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b014      	add	sp, #80	; 0x50
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	fffffeff 	.word	0xfffffeff

08003970 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10a      	bne.n	80039a2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2258      	movs	r2, #88	; 0x58
 8003990:	5a9b      	ldrh	r3, [r3, r2]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0011      	movs	r1, r2
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff fa58 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039a0:	e003      	b.n	80039aa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff fa43 	bl	8002e30 <HAL_UART_RxHalfCpltCallback>
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	589b      	ldr	r3, [r3, r2]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d10a      	bne.n	80039f2 <UART_DMAError+0x40>
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b21      	cmp	r3, #33	; 0x21
 80039e0:	d107      	bne.n	80039f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2252      	movs	r2, #82	; 0x52
 80039e6:	2100      	movs	r1, #0
 80039e8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff fea1 	bl	8003734 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d10a      	bne.n	8003a16 <UART_DMAError+0x64>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b22      	cmp	r3, #34	; 0x22
 8003a04:	d107      	bne.n	8003a16 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	225a      	movs	r2, #90	; 0x5a
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7ff feb3 	bl	800377c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2284      	movs	r2, #132	; 0x84
 8003a1a:	589b      	ldr	r3, [r3, r2]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2184      	movs	r1, #132	; 0x84
 8003a24:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fc fc09 	bl	8000240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b006      	add	sp, #24
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	225a      	movs	r2, #90	; 0x5a
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2252      	movs	r2, #82	; 0x52
 8003a50:	2100      	movs	r1, #0
 8003a52:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7fc fbf2 	bl	8000240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b004      	add	sp, #16
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	225a      	movs	r2, #90	; 0x5a
 8003a76:	2100      	movs	r1, #0
 8003a78:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	220f      	movs	r2, #15
 8003a80:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	2120      	movs	r1, #32
 8003a98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7ff f9cc 	bl	8002e40 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8003abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003abe:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	438a      	bics	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff f991 	bl	8002e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b006      	add	sp, #24
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b094      	sub	sp, #80	; 0x50
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b10:	204e      	movs	r0, #78	; 0x4e
 8003b12:	183b      	adds	r3, r7, r0
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	215c      	movs	r1, #92	; 0x5c
 8003b18:	5a52      	ldrh	r2, [r2, r1]
 8003b1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	589b      	ldr	r3, [r3, r2]
 8003b22:	2b22      	cmp	r3, #34	; 0x22
 8003b24:	d000      	beq.n	8003b28 <UART_RxISR_8BIT+0x20>
 8003b26:	e0ba      	b.n	8003c9e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	214c      	movs	r1, #76	; 0x4c
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b32:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	183b      	adds	r3, r7, r0
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b2d9      	uxtb	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	400a      	ands	r2, r1
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	225a      	movs	r2, #90	; 0x5a
 8003b58:	5a9b      	ldrh	r3, [r3, r2]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	225a      	movs	r2, #90	; 0x5a
 8003b64:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	225a      	movs	r2, #90	; 0x5a
 8003b6a:	5a9b      	ldrh	r3, [r3, r2]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d000      	beq.n	8003b74 <UART_RxISR_8BIT+0x6c>
 8003b72:	e09c      	b.n	8003cae <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b74:	f3ef 8310 	mrs	r3, PRIMASK
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b7e:	2301      	movs	r3, #1
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4948      	ldr	r1, [pc, #288]	; (8003cb8 <UART_RxISR_8BIT+0x1b0>)
 8003b96:	400a      	ands	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	438a      	bics	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	2120      	movs	r1, #32
 8003bde:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c00:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c02:	643b      	str	r3, [r7, #64]	; 0x40
 8003c04:	2301      	movs	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4928      	ldr	r1, [pc, #160]	; (8003cbc <UART_RxISR_8BIT+0x1b4>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d12f      	bne.n	8003c94 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c40:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c44:	2301      	movs	r3, #1
 8003c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f383 8810 	msr	PRIMASK, r3
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2110      	movs	r1, #16
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	2210      	movs	r2, #16
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d103      	bne.n	8003c82 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2258      	movs	r2, #88	; 0x58
 8003c86:	5a9a      	ldrh	r2, [r3, r2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0011      	movs	r1, r2
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff f8df 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c92:	e00c      	b.n	8003cae <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7fc fac2 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8003c9c:	e007      	b.n	8003cae <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2108      	movs	r1, #8
 8003caa:	430a      	orrs	r2, r1
 8003cac:	619a      	str	r2, [r3, #24]
}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b014      	add	sp, #80	; 0x50
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	fffffedf 	.word	0xfffffedf
 8003cbc:	fbffffff 	.word	0xfbffffff

08003cc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b094      	sub	sp, #80	; 0x50
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cc8:	204e      	movs	r0, #78	; 0x4e
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	215c      	movs	r1, #92	; 0x5c
 8003cd0:	5a52      	ldrh	r2, [r2, r1]
 8003cd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	589b      	ldr	r3, [r3, r2]
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	d000      	beq.n	8003ce0 <UART_RxISR_16BIT+0x20>
 8003cde:	e0ba      	b.n	8003e56 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	214c      	movs	r1, #76	; 0x4c
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003cea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	183a      	adds	r2, r7, r0
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	225a      	movs	r2, #90	; 0x5a
 8003d10:	5a9b      	ldrh	r3, [r3, r2]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b299      	uxth	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	225a      	movs	r2, #90	; 0x5a
 8003d1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	225a      	movs	r2, #90	; 0x5a
 8003d22:	5a9b      	ldrh	r3, [r3, r2]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <UART_RxISR_16BIT+0x6c>
 8003d2a:	e09c      	b.n	8003e66 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	623b      	str	r3, [r7, #32]
  return(result);
 8003d32:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4948      	ldr	r1, [pc, #288]	; (8003e70 <UART_RxISR_16BIT+0x1b0>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	643b      	str	r3, [r7, #64]	; 0x40
 8003d68:	2301      	movs	r3, #1
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	f383 8810 	msr	PRIMASK, r3
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	2120      	movs	r1, #32
 8003d96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	4013      	ands	r3, r2
 8003db0:	d018      	beq.n	8003de4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	617b      	str	r3, [r7, #20]
  return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4928      	ldr	r1, [pc, #160]	; (8003e74 <UART_RxISR_16BIT+0x1b4>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d12f      	bne.n	8003e4c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8310 	mrs	r3, PRIMASK
 8003df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2110      	movs	r1, #16
 8003e14:	438a      	bics	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d103      	bne.n	8003e3a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2210      	movs	r2, #16
 8003e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2258      	movs	r2, #88	; 0x58
 8003e3e:	5a9a      	ldrh	r2, [r3, r2]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff f803 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e4a:	e00c      	b.n	8003e66 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7fc f9e6 	bl	8000220 <HAL_UART_RxCpltCallback>
}
 8003e54:	e007      	b.n	8003e66 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2108      	movs	r1, #8
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b014      	add	sp, #80	; 0x50
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	fffffedf 	.word	0xfffffedf
 8003e74:	fbffffff 	.word	0xfbffffff

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	4d0c      	ldr	r5, [pc, #48]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7e:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e80:	1b64      	subs	r4, r4, r5
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	2600      	movs	r6, #0
 8003e8a:	f000 f821 	bl	8003ed0 <_init>
 8003e8e:	4d0a      	ldr	r5, [pc, #40]	; (8003eb8 <__libc_init_array+0x40>)
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <__libc_init_array+0x44>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	00b3      	lsls	r3, r6, #2
 8003e9e:	58eb      	ldr	r3, [r5, r3]
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	00b3      	lsls	r3, r6, #2
 8003ea8:	58eb      	ldr	r3, [r5, r3]
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08003f20 	.word	0x08003f20
 8003eb4:	08003f20 	.word	0x08003f20
 8003eb8:	08003f20 	.word	0x08003f20
 8003ebc:	08003f24 	.word	0x08003f24

08003ec0 <memset>:
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	1882      	adds	r2, r0, r2
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	7019      	strb	r1, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <_init>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

08003edc <_fini>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr
